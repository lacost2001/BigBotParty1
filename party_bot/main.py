import discord
from discord.ext import commands
from discord import app_commands, ui
import json
import os
import sqlite3
from datetime import datetime, timedelta, timezone
import asyncio
import sys
import socket
import aiohttp
import threading
import time
from typing import Optional
from urllib.parse import quote

# ==== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è recruit_bot (—Ä–µ–∫—Ä—É—Ç/–æ—á–∫–∏/–º–∞–≥–∞–∑–∏–Ω) ====
try:
    from recruit_bot.ui_components import PersistentEventSubmitView, UnifiedEventView
    from recruit_bot import bot as recruit_bot_module
    from recruit_bot.bot import RecruitCog, init_db as recruit_init_db, PersistentApplyButtonView, PersistentPointsRequestView, ApplyModal
    from unified_settings import unified_settings as _unified_settings
    RECRUIT_AVAILABLE = True
except ImportError as _recruit_err:
    print(f"Recruit modules not available: {_recruit_err}")
    RECRUIT_AVAILABLE = False

"""–ï–¥–∏–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫.
–ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–µ—Ñ–æ–ª—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å –≤ web.get_complete_guild_settings.
–ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫–∏–µ –æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –±–æ—Ç–∞.
"""
try:
    # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–∞–∫–µ—Ç Bigbot.party_bot.* —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ bot_main.py
    from party_bot.simple_settings_db import (
        get_settings_db as _get_settings_db,
        get_guild_setting as _db_get_setting,
        set_guild_setting as _db_set_setting,
        get_guild_settings as _db_get_settings
    )
    USING_DATABASE = True
    USING_FAST_DB = True
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –±—ã—Å—Ç—Ä—ã–π simple_settings_db")
except ImportError as e_simple:
    print(f"‚ö†Ô∏è simple_settings_db –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e_simple}")
    try:
        from party_bot.settings_db import (
            get_guild_settings as _db_get_settings,
            set_guild_setting as _db_set_setting,
            get_guild_setting as _db_get_setting
        )
        USING_DATABASE = True
        USING_FAST_DB = False
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: settings_db (fallback)")
    except ImportError as e_legacy:
        print(f"‚ùå –ù–µ—Ç –ë–î –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e_legacy} -> fallback –∫ —Ñ–∞–π–ª—É settings.json")
        USING_DATABASE = False
        USING_FAST_DB = False

# –û–±—ë—Ä—Ç–∫–∏ (API –±–æ—Ç–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
def get_guild_settings(guild_id: int):
    if USING_DATABASE:
        return _db_get_settings(guild_id)
    # –§–∞–π–ª–æ–≤—ã–π fallback –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π SETTINGS
    guild_id_str = str(guild_id)
    if "guilds" not in SETTINGS:
        SETTINGS["guilds"] = {}
    return SETTINGS["guilds"].setdefault(guild_id_str, {})

def set_guild_setting(guild_id: int, key: str, value):
    if USING_DATABASE:
        return _db_set_setting(guild_id, key, value)
    guild_id_str = str(guild_id)
    if "guilds" not in SETTINGS:
        SETTINGS["guilds"] = {}
    SETTINGS["guilds"].setdefault(guild_id_str, {})[key] = value
    save_all_data()

def get_guild_setting(guild_id: int, key: str, default=None):
    if USING_DATABASE:
        return _db_get_setting(guild_id, key, default)
    return get_guild_settings(guild_id).get(key, default)

# === –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ ===
REQUIRED_BASE_KEYS = [
    'event_creator_role', 'moderator_role', 'ping_role'
]
REQUIRED_RECRUIT_KEYS = [
    'default_role', 'recruit_role', 'recruit_panel_channel'
]

def evaluate_guild_setup(guild_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict c —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.
    status: 'missing' (–Ω–∏—á–µ–≥–æ –Ω–µ—Ç), 'partial', 'complete'
    missing: —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    """
    settings = get_guild_settings(guild_id) or {}
    recruit = settings.get('recruit_settings') or {}
    missing = []
    for k in REQUIRED_BASE_KEYS:
        if settings.get(k) in (None, '', [], {}):
            missing.append(k)
    for k in REQUIRED_RECRUIT_KEYS:
        if recruit.get(k) in (None, '', [], {}):
            missing.append(f"recruit:{k}")
    if len(missing) == len(REQUIRED_BASE_KEYS) + len(REQUIRED_RECRUIT_KEYS):
        status = 'missing'
    elif missing:
        status = 'partial'
    else:
        status = 'complete'
    return {'status': status, 'missing': missing, 'settings': settings}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
last_setup_message_time = {}

async def send_setup_message(guild: discord.Guild, channel: Optional[discord.TextChannel] = None, force: bool=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ embed —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    –ï—Å–ª–∏ force=True –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–ø–∞–º–∞)
        now = datetime.now()
        last_sent = last_setup_message_time.get(guild.id)
        if not force and last_sent and (now - last_sent).total_seconds() < 300:  # 5 –º–∏–Ω—É—Ç
            return
        
        state = evaluate_guild_setup(guild.id)
        if not force and state['status'] == 'complete':
            return
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–Ω–∞–ª: –∑–∞–¥–∞–Ω–Ω—ã–π, –ª–∏–±–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π, –ª–∏–±–æ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π
        if channel is None:
            channel = guild.system_channel
            if channel is None:
                for ch in guild.text_channels:
                    if ch.permissions_for(guild.me).send_messages:
                        channel = ch
                        break
        if channel is None:
            return
        status = state['status']
        missing = state['missing']
        url = f"{WEB_BASE_URL}/guild/{guild.id}"
        title_map = {
            'missing': 'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞',
            'partial': '‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
            'complete': '‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
        }
        color_map = {
            'missing': 0xE74C3C,  # –ö—Ä–∞—Å–Ω—ã–π
            'partial': 0xF39C12,  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'complete': 0x2ECC71  # –ó–µ–ª–µ–Ω—ã–π
        }
        desc_lines = []
        if status == 'missing':
            desc_lines.append('üîß **–ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**')
            desc_lines.append('‚Ä¢ –†–æ–ª–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –ø–∏–Ω–≥-—Ä–æ–ª—å)')
            desc_lines.append('‚Ä¢ –ö–∞–Ω–∞–ª—ã –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∏ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞')
            desc_lines.append('‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞ –∏ –æ—á–∫–æ–≤')
            desc_lines.append('')
            desc_lines.append('üí° **–ó–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ:**')
            desc_lines.append('‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏')
            desc_lines.append('‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤')
            desc_lines.append('‚Ä¢ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–∫–∞–º–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
            desc_lines.append('‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∑–∞ –æ—á–∫–∏')
        elif status == 'partial':
            desc_lines.append('üîß **–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:**')
            for m in missing[:8]:
                desc_lines.append(f"‚Ä¢ {m}")
            if len(missing) > 8:
                desc_lines.append(f"‚Ä¢ ‚Ä¶ –∏ –µ—â—ë {len(missing)-8} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        else:
            desc_lines.append('üéâ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')
            desc_lines.append('üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.')
        
        desc_lines.append('')
        desc_lines.append(f"üåê **[–û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫]({url})**")
        
        embed = discord.Embed(
            title=title_map[status], 
            description='\n'.join(desc_lines), 
            color=color_map[status]
        )
        embed.add_field(
            name="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            value="‚Ä¢ üéâ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n‚Ä¢ üë• –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞\n‚Ä¢ üèÜ –û—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n‚Ä¢ üõí –ú–∞–≥–∞–∑–∏–Ω –Ω–∞–≥—Ä–∞–¥",
            inline=False
        )
        embed.set_footer(text=f"Bot Setup ‚Ä¢ –°–µ—Ä–≤–µ—Ä: {guild.name}")
        await channel.send(embed=embed)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        last_setup_message_time[guild.id] = now
        
    except Exception as e:
        print(f"[SETUP NOTICE] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞)
SCRIPT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
CONFIG_FILE = os.path.join(SCRIPT_DIR, "config.json")
DB_FILE = os.path.join(SCRIPT_DIR, "events.db")
SESSIONS_FILE = os.path.join(SCRIPT_DIR, "sessions.json")
STATS_FILE = os.path.join(SCRIPT_DIR, "party_stats.json")
SETTINGS_FILE = os.path.join(SCRIPT_DIR, "settings.json")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π .env –∏ config.json
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config.json"""
    config = {}
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ config.json (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r", encoding="utf-8") as f:
                config = json.load(f)
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config.json")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json: {e}")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ config.json
    env_vars = {
        'BOT_TOKEN': os.getenv('BOT_TOKEN'),
        'WEB_BASE_URL': os.getenv('WEB_BASE_URL'),
        'DISCORD_CLIENT_ID': os.getenv('DISCORD_CLIENT_ID'),
        'DISCORD_CLIENT_SECRET': os.getenv('DISCORD_CLIENT_SECRET'),
        'DISCORD_REDIRECT_URI': os.getenv('DISCORD_REDIRECT_URI'),
        'FLASK_SECRET_KEY': os.getenv('FLASK_SECRET_KEY'),
        'ADMIN_USERS': os.getenv('ADMIN_USERS'),
        'DEBUG': os.getenv('DEBUG'),
        'PORT': os.getenv('PORT')
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
    for key, value in env_vars.items():
        if value is not None:
            config[key] = value
    
    return config

# Load config
CONFIG = load_config()

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª—é—á–µ–π –≤ config.json –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
BOT_TOKEN = CONFIG.get("BOT_TOKEN") or CONFIG.get("bot_token") or os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ config.json")
    print("   –ü—Ä–∏–º–µ—Ä: export BOT_TOKEN=your_token_here")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
WEB_BASE_URL = CONFIG.get('WEB_BASE_URL', 'http://localhost:8082')

# Setup DB
conn = sqlite3.connect(DB_FILE)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS events (
    id INTEGER PRIMARY KEY,
    guild_id INTEGER,
    channel_id INTEGER,
    main_msg_id INTEGER,
    thread_id INTEGER,
    title TEXT,
    description TEXT,
    time TEXT,
    party_roles TEXT,
    creator_id INTEGER,
    stopped INTEGER DEFAULT 0
)
""")
conn.commit()

ALL_SESSIONS = {}
raw_stats = {}
SETTINGS = {"guilds": {}}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã (sessions, stats). settings.json –±—É–¥–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑.
for file, default in [(SESSIONS_FILE, {}), (STATS_FILE, {})]:
    if not os.path.exists(file):
        with open(file, "w", encoding="utf-8") as f:
            json.dump(default, f)
try:
    with open(SESSIONS_FILE, "r", encoding="utf-8") as f:
        ALL_SESSIONS = json.load(f)
except Exception:
    ALL_SESSIONS = {}
try:
    with open(STATS_FILE, "r", encoding="utf-8") as f:
        raw_stats = json.load(f)
except Exception:
    raw_stats = {}

def _migrate_settings_json_to_db():
    """–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –º–∏–≥—Ä–∞—Ü–∏—è settings.json -> simple_settings_db.
    –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–∞–∑–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.
    """
    if not USING_DATABASE:
        return
    if not os.path.exists(SETTINGS_FILE):
        return
    try:
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        return
    if not isinstance(data, dict):
        return
    guilds = data.get("guilds") or {}
    if not isinstance(guilds, dict) or not guilds:
        return
    print(f"üõ†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è settings.json -> settings.db (guilds: {len(guilds)})")
    for gid, gsettings in guilds.items():
        try:
            gid_int = int(gid)
        except Exception:
            continue
        if not isinstance(gsettings, dict):
            continue
        # –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π db API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            if USING_FAST_DB:
                db = _get_settings_db()
                db.batch_set_settings(gid_int, gsettings)
            else:
                # –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–æ –∫–ª—é—á—É
                for k, v in gsettings.items():
                    set_guild_setting(gid_int, k, v)
        except Exception as mig_err:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ guild {gid}: {mig_err}")
    # –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Ñ–∞–π–ª —á—Ç–æ–±—ã –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
    try:
        os.rename(SETTINGS_FILE, SETTINGS_FILE + ".migrated")
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏—Å—Ö–æ–¥–Ω—ã–π settings.json –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω")
    except Exception:
        pass

_migrate_settings_json_to_db()

PARTY_STATS = {int(uid): set(events) for uid, events in raw_stats.items()}

def reload_settings_from_disk():
    # –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ë–î –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º live‚Äëreload JSON –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if USING_DATABASE:
        return
    try:
        with open(SETTINGS_FILE, "r", encoding="utf-8") as f:
            loaded = json.load(f)
        if isinstance(loaded, dict):
            SETTINGS.update(loaded)
    except Exception:
        pass

def _deep_merge_dicts(base: dict, incoming: dict) -> dict:
    """–ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π. –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ incoming –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
    –ù–µ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–∏–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å."""
    result = dict(base or {})
    for k, v in (incoming or {}).items():
        if isinstance(v, dict) and isinstance(result.get(k), dict):
            result[k] = _deep_merge_dicts(result[k], v)
        else:
            result[k] = v
    return result

def save_all_data():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î; –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    with open(SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(ALL_SESSIONS, f, indent=2, ensure_ascii=False)
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump({str(uid): list(events) for uid, events in PARTY_STATS.items()}, f, indent=2, ensure_ascii=False)


def get_guild_templates(guild_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    templates_file = f"templates_data/guild_{guild_id}_templates.json"
    
    if not os.path.exists("templates_data"):
        os.makedirs("templates_data")
    
    if os.path.exists(templates_file):
        try:
            with open(templates_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}")
            return {}
    return {}

def save_guild_templates(guild_id: int, templates: dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not os.path.exists("templates_data"):
        os.makedirs("templates_data")
    
    templates_file = f"templates_data/guild_{guild_id}_templates.json"
    try:
        with open(templates_file, "w", encoding="utf-8") as f:
            json.dump(templates, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}")

def set_guild_template(guild_id: int, template_name: str, template_data: dict):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    templates = get_guild_templates(guild_id)
    templates[template_name] = template_data
    save_guild_templates(guild_id, templates)

def delete_guild_template(guild_id: int, template_name: str):
    """–£–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    templates = get_guild_templates(guild_id)
    if template_name in templates:
        del templates[template_name]
        save_guild_templates(guild_id, templates)
        return True
    return False

def get_guild_template(guild_id: int, template_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    templates = get_guild_templates(guild_id)
    return templates.get(template_name)
    return False

def get_guild_template(guild_id: int, template_name: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
    guild_templates = get_guild_templates(guild_id)
    return guild_templates.get(template_name)

def save_event(event_id: int, data: dict):
    cursor.execute("""
        INSERT OR REPLACE INTO events (id, guild_id, channel_id, main_msg_id, thread_id, title, description, time, party_roles, creator_id, stopped)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        event_id,
        data["guild_id"],
        data["channel_id"],
        data["main_msg_id"],
        data["thread_id"],
        data["title"],
        data["description"],
        data.get("time", ""),
        json.dumps(data["party_roles"], ensure_ascii=False),
        data["creator_id"],
        int(data.get("stopped", False))
    ))
    conn.commit()

def load_events_from_db():
    cursor.execute("SELECT * FROM events")
    rows = cursor.fetchall()
    events = {}
    for row in rows:
        event_id = row[0]
        events[event_id] = {
            "guild_id": row[1],
            "channel_id": row[2],
            "main_msg_id": row[3],
            "thread_id": row[4],
            "title": row[5],
            "description": row[6],
            "time": row[7],
            "party_roles": json.loads(row[8]),
            "creator_id": row[9],
            "stopped": bool(row[10]),
        }
    return events

ALL_EVENTS = load_events_from_db()
ALL_SESSIONS = {str(k): v for k, v in ALL_EVENTS.items()}

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="/", intents=intents)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
try:
    from party_bot.web import set_bot_instance
    set_bot_instance(bot)
except ImportError:
    pass  # –í–µ–±-–º–æ–¥—É–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# –ì—Ä—É–ø–ø—ã –∫–æ–º–∞–Ω–¥ - —É–±–∏—Ä–∞–µ–º –¥–ª—è –∑–∞–º–µ–Ω—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞–º–∏
# settings_group = app_commands.Group(name="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞")
# templates_group = app_commands.Group(name="templates", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –∏–≤–µ–Ω—Ç–æ–≤") 
# events_group = app_commands.Group(name="events", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞–º–∏")

# --- Views and UI elements ---

class PartySelectView(ui.View):
    def __init__(self, session_id, user_id):
        super().__init__(timeout=None)
        self.session_id = session_id
        self.user_id = user_id
        self.custom_id = f"party_select_{session_id}"

        session = ALL_SESSIONS.get(str(session_id))
        if not session:
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 25)
        if not session.get("stopped"):
            roles = session["party_roles"]
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 25 (–ª–∏–º–∏—Ç Discord)
            for group_index in range(0, len(roles), 25):
                group_roles = roles[group_index:group_index + 25]
                options = []
                
                for i, role in enumerate(group_roles):
                    actual_index = group_index + i
                    user = role.get("user_id")
                    label = f"{role['name']}"
                    if user:
                        label += f" (–ó–∞–Ω—è—Ç–æ: <@{user}>)"
                    options.append(discord.SelectOption(
                        label=label[:100],  # Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –º–µ—Ç–∫–∏
                        value=str(actual_index)
                    ))
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                group_number = (group_index // 25) + 1
                total_groups = (len(roles) + 24) // 25  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
                
                if total_groups > 1:
                    placeholder = f"–†–æ–ª–∏ {group_index + 1}-{min(group_index + 25, len(roles))} (—Å—Ç—Ä. {group_number}/{total_groups})"
                else:
                    placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏"
                
                self.add_item(PartySignupSelect(options, session_id, user_id, placeholder))
            
            self.add_item(PartyUnsubscribeButton(session_id, user_id))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
        if session.get("creator_id") == user_id:
            self.add_item(EditButton(session_id))
            self.add_item(StopEventButton(session_id))
            self.add_item(RemindButton(session_id))

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Å–∞–º–∏—Ö –∫–Ω–æ–ø–∫–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.add_item(PartyCheckButton(session_id))
        self.add_item(CloneButton(session_id))
        self.add_item(RefreshButton(session_id))

class PartySignupSelect(ui.Select):
    def __init__(self, options, session_id, user_id, placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏"):
        super().__init__(
            placeholder=placeholder, 
            options=options, 
            max_values=1,
            custom_id=f"signup_select_{session_id}_{len(options)}"  # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        )
        self.session_id = session_id
        self.user_id = user_id

    async def callback(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        roles = session["party_roles"]
        user_id = interaction.user.id

        if session.get("stopped"):
            await interaction.response.send_message("‚ùå –ò–≤–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞.", ephemeral=True)
            return

        index = int(self.values[0])
        selected_role = roles[index]

        if selected_role.get("user_id") and selected_role["user_id"] != user_id:
            await interaction.response.send_message("‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º.", ephemeral=True)
            return

        if selected_role.get("user_id") == user_id:
            await interaction.response.send_message("‚ùó –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç.", ephemeral=True)
            return

        # –°–Ω—è—Ç—å –∑–∞–ø–∏—Å—å —Ç–æ–ª—å–∫–æ —Å –¥—Ä—É–≥–∏—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        for i, r in enumerate(roles):
            if r.get("user_id") == user_id and i != index:
                r["user_id"] = None

        selected_role["user_id"] = user_id

        register_signup(user_id, self.session_id)
        ALL_SESSIONS[str(self.session_id)] = session
        save_all_data()
        save_event(int(self.session_id), session)
        await interaction.response.defer()
        await update_party_message(self.session_id, interacting_user_id=user_id)
        await interaction.followup.send("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!", ephemeral=True)

class PartyUnsubscribeButton(ui.Button):
    def __init__(self, session_id, user_id):
        super().__init__(
            label="üö™ –í—ã–ø–∏—Å–∞—Ç—å—Å—è", 
            style=discord.ButtonStyle.danger,
            custom_id=f"unsubscribe_button_{session_id}"  # –î–æ–±–∞–≤–ª—è–µ–º custom_id
        )
        self.session_id = session_id

    async def callback(self, interaction: discord.Interaction):
        user_id = interaction.user.id
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.defer()
            await update_party_message(self.session_id, interacting_user_id=user_id)
            await interaction.followup.send("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        roles = session["party_roles"]
        found = False

        for role in roles:
            if role.get("user_id") == user_id:
                role["user_id"] = None
                found = True
                break

        if found:
            ALL_SESSIONS[str(self.session_id)] = session
            save_all_data()
            save_event(int(self.session_id), session)
            await update_party_message(self.session_id, interacting_user_id=user_id)
            await interaction.response.send_message("‚úÖ –í—ã –≤—ã–ø–∏—Å–∞–ª–∏—Å—å —Å–æ —Å–≤–æ–µ–≥–æ —Å–ª–æ—Ç–∞.", ephemeral=True)

        else:
            await interaction.response.send_message("‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω —Å–ª–æ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ.", ephemeral=True)
            

class PartyUnsubscribeSelect(ui.Select):
    def __init__(self, options, session_id, user_id):
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –≤—ã–ø–∏—Å–∫–∏", options=options, max_values=1)
        self.session_id = session_id
        self.user_id = user_id

    async def callback(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        roles = session["party_roles"]
        index = int(self.values[0])
        if roles[index].get("user_id"):
            roles[index]["user_id"] = None
            ALL_SESSIONS[str(self.session_id)] = session
            save_all_data()
            save_event(int(self.session_id), session)
            await update_party_message(self.session_id, interacting_user_id=interaction.user.id)
            await interaction.response.send_message("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã–ø–∏—Å–∞–Ω.", ephemeral=True)
        else:
            await interaction.response.send_message("–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω.", ephemeral=True)

class CloneButton(ui.Button):
    def __init__(self, session_id):
        super().__init__(
            label="üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å", 
            style=discord.ButtonStyle.gray,
            custom_id=f"clone_button_{session_id}"  # –î–æ–±–∞–≤–ª—è–µ–º custom_id
        )
        self.session_id = session_id

    async def callback(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
        moderator_role_id = get_guild_setting(interaction.guild.id, "moderator_role")
        is_moderator = moderator_role_id and any(r.id == moderator_role_id for r in interaction.user.roles)
        is_creator = interaction.user.id == session["creator_id"]
        is_admin = interaction.user.guild_permissions.administrator
        
        if not (is_creator or is_moderator or is_admin):
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.", ephemeral=True)
            return
        
        role_list = [r["name"] for r in session["party_roles"]]
        embed = discord.Embed(
            title=session["title"] + " (–∫–æ–ø–∏—è)",
            description=f"–°–æ–∑–¥–∞–ª: <@{interaction.user.id}>\n\n{session['description']}",
            color=0x00ff00
        )
        if session.get("time"):
            embed.description += f"\n\nüïí –í—Ä–µ–º—è: {session['time']}"
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–∏", value="\n".join([f"{i+1}. {r} - –°–≤–æ–±–æ–¥–Ω–æ" for i, r in enumerate(role_list)]))
        msg = await interaction.channel.send(embed=embed)
        thread = await msg.create_thread(name=session["title"] + " (–∫–æ–ø–∏—è)")
        await thread.send("üìå –ù–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç.\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üö™ –í—ã–ø–∏—Å–∞—Ç—å—Å—è\".")
        new_session_id = msg.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        event_creator_role_id = get_guild_setting(interaction.guild.id, "event_creator_role")
        moderator_role_id = get_guild_setting(interaction.guild.id, "moderator_role")
        creator_id = bot.user.id  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω–æ–π —Ä–æ–ª—å—é
        for member in interaction.guild.members:
            if event_creator_role_id and any(r.id == event_creator_role_id for r in member.roles):
                creator_id = member.id
                break
            if moderator_role_id and any(r.id == moderator_role_id for r in member.roles):
                creator_id = member.id
                break

        ALL_SESSIONS[str(new_session_id)] = {
            "guild_id": session["guild_id"],
            "channel_id": session["channel_id"],
            "main_msg_id": msg.id,
            "thread_id": thread.id,
            "title": session["title"] + " (–∫–æ–ø–∏—è)",
            "description": session["description"],
            "time": session.get("time", ""),
            "party_roles": [{"name": r, "user_id": None} for r in role_list],
            "creator_id": creator_id,
            "stopped": False,
            "last_reminder_time": 0
        }
        save_all_data()
        save_event(new_session_id, ALL_SESSIONS[str(new_session_id)])
        await update_party_message(new_session_id, interacting_user_id=interaction.user.id)
        await interaction.response.send_message(f"‚úÖ –ö–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {msg.jump_url}", ephemeral=True)

class StopEventButton(ui.Button):
    def __init__(self, session_id):
        super().__init__(
            label="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≤–µ–Ω—Ç", 
            style=discord.ButtonStyle.red,
            custom_id=f"stop_button_{session_id}"
        )
        self.session_id = session_id

    async def callback(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        guild = interaction.guild
        moderator_role_id = get_guild_setting(interaction.guild.id, "moderator_role")
        is_moderator = moderator_role_id and any(r.id == moderator_role_id for r in interaction.user.roles)
        if interaction.user.id != session["creator_id"] and not is_moderator:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≤–µ–Ω—Ç–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", ephemeral=True)
            return
        if session.get("stopped"):
            await interaction.response.send_message("–ò–≤–µ–Ω—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", ephemeral=True)
            return
        session["stopped"] = True
        ALL_SESSIONS[str(self.session_id)] = session
        save_all_data()
        save_event(int(self.session_id), session)
        await update_party_message(self.session_id, interacting_user_id=interaction.user.id)
        await interaction.response.send_message("–ò–≤–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞.", ephemeral=True)

class RemindButton(ui.Button):
    def __init__(self, session_id):
        super().__init__(
            label="üì¢ –ù–∞–ø–æ–º–Ω–∏—Ç—å", 
            style=discord.ButtonStyle.primary,
            custom_id=f"remind_button_{session_id}"  # –î–æ–±–∞–≤–ª—è–µ–º custom_id
        )
        self.session_id = session_id

    async def callback(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        mentions = []
        for role in session["party_roles"]:
            user_id = role.get("user_id")
            if user_id:
                mentions.append(f"<@{user_id}>")
        if mentions:
            await interaction.response.send_message(
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è: " + ", ".join(mentions),
                allowed_mentions=discord.AllowedMentions(users=True)
            )
        else:
            await interaction.response.send_message("–ù–µ—Ç –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", ephemeral=True)

class PartyCheckButton(ui.Button):
    def __init__(self, session_id):
        super().__init__(
            label="üìã Party Check", 
            style=discord.ButtonStyle.green,
            custom_id=f"check_button_{session_id}"  # –î–æ–±–∞–≤–ª—è–µ–º custom_id
        )
        self.session_id = session_id

    async def callback(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (—Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)
        moderator_role_id = get_guild_setting(interaction.guild.id, "moderator_role")
        is_moderator = moderator_role_id and any(r.id == moderator_role_id for r in interaction.user.roles)
        is_creator = interaction.user.id == session["creator_id"]
        is_admin = interaction.user.guild_permissions.administrator
        
        if not (is_creator or is_moderator or is_admin):
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", ephemeral=True)
            return
        
        guild = bot.get_guild(session["guild_id"])
        if not guild:
            await interaction.response.send_message("–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.", ephemeral=True)
            return
        member = guild.get_member(interaction.user.id)
        if not member:
            await interaction.response.send_message("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å.", ephemeral=True)
            return
        voice_channel = None
        if member.voice and member.voice.channel:
            voice_channel = member.voice.channel
        else:
            await interaction.response.send_message("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.", ephemeral=True)
            return
        voice_member_ids = {m.id for m in voice_channel.members}
        absent = []
        for role in session["party_roles"]:
            user_id = role.get("user_id")
            if user_id and user_id not in voice_member_ids:
                absent.append(f"<@{user_id}> ({role['name']})")
        if absent:
            await interaction.response.send_message(
                f"‚ùó –°–ª–µ–¥—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ **{voice_channel.name}**:\n" + "\n".join(absent),
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"–í—Å–µ –∑–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ **{voice_channel.name}**.",
                ephemeral=True
            )

class RefreshButton(ui.Button):
    def __init__(self, session_id):
        super().__init__(
            label="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
            style=discord.ButtonStyle.secondary,
            custom_id=f"refresh_button_{session_id}"  # –î–æ–±–∞–≤–ª—è–µ–º custom_id
        )
        self.session_id = session_id

    async def callback(self, interaction: discord.Interaction):
        await update_party_message(self.session_id, interacting_user_id=interaction.user.id)
        await interaction.response.send_message("–û–±–Ω–æ–≤–ª–µ–Ω–æ", ephemeral=True)

class EditModal(ui.Modal, title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞"):
    def __init__(self, session_id: int):
        super().__init__()
        self.session_id = session_id
        session = ALL_SESSIONS.get(str(session_id))
        self.name = ui.TextInput(label="–ù–∞–∑–≤–∞–Ω–∏–µ", default=session.get("title", ""), required=True)
        self.desc = ui.TextInput(label="–û–ø–∏—Å–∞–Ω–∏–µ", style=discord.TextStyle.paragraph, default=session.get("description", ""), required=False)
        self.time = ui.TextInput(label="–í—Ä–µ–º—è –∏–≤–µ–Ω—Ç–∞", default=session.get("time", ""), required=False)
        roles_str = "\n".join([r["name"] for r in session.get("party_roles", [])])
        self.roles = ui.TextInput(label="–†–æ–ª–∏ (–ø–æ —Å—Ç—Ä–æ–∫–∞–º)", style=discord.TextStyle.paragraph, default=roles_str, required=True)
        self.add_item(self.name)
        self.add_item(self.desc)
        self.add_item(self.time)
        self.add_item(self.roles)

    async def on_submit(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        role_list = [r.strip() for r in self.roles.value.strip().splitlines() if r.strip()]
        if not role_list:
            await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π
        if len(role_list) > 50:
            await interaction.response.send_message("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–ª–µ–π (–º–∞–∫—Å–∏–º—É–º 50). –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π.", ephemeral=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        session["title"] = self.name.value.strip()
        session["description"] = self.desc.value.strip()
        session["time"] = self.time.value.strip()

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º party_roles —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∏–º–µ–Ω–∏
        old_roles = session["party_roles"]
        new_roles = []
        for role_name in role_list:
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–µ–∂–Ω–∏–π user_id –ø–æ –∏–º–µ–Ω–∏ —Ä–æ–ª–∏
            user_id = None
            for r in old_roles:
                if r["name"] == role_name:
                    user_id = r.get("user_id")
                    break
            new_roles.append({"name": role_name, "user_id": user_id})
        session["party_roles"] = new_roles

        ALL_SESSIONS[str(self.session_id)] = session
        save_all_data()
        save_event(self.session_id, session)
        await update_party_message(self.session_id, interacting_user_id=interaction.user.id)
        await interaction.response.send_message("–ò–≤–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω", ephemeral=True)

class EditButton(ui.Button):
    def __init__(self, session_id):
        super().__init__(
            label="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
            style=discord.ButtonStyle.secondary,
            custom_id=f"edit_button_{session_id}"  # –î–æ–±–∞–≤–ª—è–µ–º custom_id
        )
        self.session_id = session_id

    async def callback(self, interaction: discord.Interaction):
        session = ALL_SESSIONS.get(str(self.session_id))
        if not session:
            await interaction.response.send_message("–û—à–∏–±–∫–∞: –∏–≤–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return
        if interaction.user.id != session["creator_id"]:
            await interaction.response.send_message("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≤–µ–Ω—Ç–∞ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.", ephemeral=True)
            return
        modal = EditModal(self.session_id)
        await interaction.response.send_modal(modal)

class ViewWithStorage(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.selected_channel = None

class ChannelSelect(discord.ui.Select):
    def __init__(self, guild, parent_view):
        options = [
            discord.SelectOption(
                label=f"#{channel.name}",
                value=str(channel.id),
                description=f"ID: {channel.id}"
            ) for channel in guild.text_channels
        ]
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
            min_values=1,
            max_values=1,
            options=options
        )
        self.parent_view = parent_view  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è

    async def callback(self, interaction: discord.Interaction):
        self.parent_view.selected_channel = int(self.values[0])
        await interaction.response.send_message(
            f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: <#{self.parent_view.selected_channel}>", ephemeral=True
        )

class SaveButton(discord.ui.Button):
    def __init__(self, parent_view, event_creator_role, moderator_role):
        super().__init__(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", style=discord.ButtonStyle.green)
        self.parent_view = parent_view
        self.event_creator_role = event_creator_role
        self.moderator_role = moderator_role

    async def callback(self, interaction: discord.Interaction):
        if not self.parent_view.selected_channel:
            await interaction.response.send_message("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª!", ephemeral=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        set_guild_setting(interaction.guild.id, "monitored_channels", [self.parent_view.selected_channel])
        set_guild_setting(interaction.guild.id, "event_creator_role", self.event_creator_role.id)
        set_guild_setting(interaction.guild.id, "moderator_role", self.moderator_role.id)
        
        channel = interaction.guild.get_channel(self.parent_view.selected_channel)
        await interaction.response.send_message(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
            f"–†–æ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏–≤–µ–Ω—Ç–æ–≤: {self.event_creator_role.mention}\n"
            f"–†–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {self.moderator_role.mention}\n"
            f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∫–∞–Ω–∞–ª: {channel.mention}",
            ephemeral=True
        )

# --- Functions ---

async def update_party_message(event_id: int, interacting_user_id=None):
    session = ALL_SESSIONS.get(str(event_id))
    if not session:
        return
    guild = bot.get_guild(session["guild_id"])
    if not guild:
        return
    channel = guild.get_channel(session["channel_id"])
    if not channel:
        return
    try:
        message = await channel.fetch_message(session["main_msg_id"])
    except discord.NotFound:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ - –ø–æ–º–µ—á–∞–µ–º –∏–≤–µ–Ω—Ç –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º")
        session["stopped"] = True
        ALL_SESSIONS[str(event_id)] = session
        save_all_data()
        save_event(event_id, session)
        return
    except Exception:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–≥–æ –ø–∏–Ω–≥—É–µ–º
    ping_val = get_guild_setting(session["guild_id"], "ping_role", "everyone")
    if ping_val == "everyone":
        ping_text = "@everyone"
        allowed_mentions = discord.AllowedMentions(everyone=True)
    else:
        role = guild.get_role(int(ping_val))
        if role and role.mentionable:
            ping_text = role.mention
            allowed_mentions = discord.AllowedMentions(roles=True)
        else:
            ping_text = "@everyone"
            allowed_mentions = discord.AllowedMentions(everyone=True)

    roles_text = ""
    for idx, role in enumerate(session["party_roles"], 1):
        user_id = role.get("user_id")
        if user_id:
            roles_text += f"{idx}. {role['name']} ‚Äî <@{user_id}>\n"
        else:
            roles_text += f"{idx}. {role['name']} ‚Äî –°–≤–æ–±–æ–¥–Ω–æ\n"

    text = (
        f"{ping_text}\n"
        f"**{session['title']}**\n"
        f"{session['description']}\n\n"
    )
    
    if session.get("time"):
        text += f"**–í—Ä–µ–º—è:** {session['time']}\n\n"
    
    text += f"**–†–æ–ª–∏:**\n{roles_text}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö –µ—Å–ª–∏ —Ä–æ–ª–µ–π –º–Ω–æ–≥–æ
    total_roles = len(session["party_roles"])
    if total_roles > 25:
        text += f"\nüí° *–†–æ–ª–µ–π –º–Ω–æ–≥–æ ({total_roles}), –æ–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤*\n"
    
    if session.get("stopped"):
        text += "\n*–ò–≤–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞*"
    else:
        text += "\n*–ò–≤–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω*"

    view = PartySelectView(event_id, interacting_user_id or 0)
    view.timeout = None
    try:
        await message.edit(content=text, view=view, embed=None, allowed_mentions=allowed_mentions)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def register_signup(user_id: int, session_id: int):
    if user_id not in PARTY_STATS:
        PARTY_STATS[user_id] = set()
    PARTY_STATS[user_id].add(session_id)
    save_all_data()


# --- Commands ---

# –ù–æ–≤—ã–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞–º–∏

@bot.tree.command(name="settings", description="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
@app_commands.describe(
    show_web_links="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–ø–∞–Ω–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
)
async def settings_command(
    interaction: discord.Interaction, 
    show_web_links: bool = False
):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ–º, –Ω–æ –≤–µ–±-—Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    if show_web_links and not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤–µ–±-—Å—Å—ã–ª–∫–∏", ephemeral=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await show_settings_info(interaction)
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã –≤–µ–±-—Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if show_web_links and interaction.user.guild_permissions.administrator:
        base_url = "http://localhost:8082"
        guild_id = interaction.guild.id
        
        view = ui.View(timeout=None)
        
        # –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        admin_button = ui.Button(
            label="ÔøΩÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            style=discord.ButtonStyle.primary,
            url=f"{base_url}/guild/{guild_id}"
        )
        view.add_item(admin_button)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π
        roles_button = ui.Button(
            label="üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π",
            style=discord.ButtonStyle.secondary,
            url=f"{base_url}/guild/{guild_id}/role-settings"
        )
        view.add_item(roles_button)
        
        # –ö–Ω–æ–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        templates_button = ui.Button(
            label="üìù –®–∞–±–ª–æ–Ω—ã",
            style=discord.ButtonStyle.secondary,
            url=f"{base_url}/guild/{guild_id}/templates"
        )
        view.add_item(templates_button)
        
        embed = discord.Embed(
            title="üåê –í–µ–±-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
            color=discord.Color.blue()
        )
        
        embed.add_field(
            name="üõ†Ô∏è –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            value=(
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–±—ã—Ç–∏–π\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ª–æ–≥–æ–≤"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üîß –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏",
            value=(
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/settings` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
                "‚Ä¢ –í–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
                "‚Ä¢ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            ),
            inline=False
        )
        
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)

async def show_settings_info(interaction: discord.Interaction):
    import time as _t
    started = _t.time()
    guild_id = interaction.guild.id
    try:
        # –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏ (–∏–º–ø–æ—Ä—Ç –ª–µ–Ω–∏–≤—ã–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤)
        from party_bot.web import get_complete_guild_settings, DEFAULT_SETTINGS  # type: ignore
        full_settings = get_complete_guild_settings(guild_id)
        source = "üóÉÔ∏è settings.db"
    except Exception as e:
        # Fallback –µ—Å–ª–∏ –≤–µ–± –º–æ–¥—É–ª—å –Ω–µ –ø—Ä–æ–≥—Ä—É–∂–µ–Ω
        print(f"[SETTINGS CMD] fallback direct DB: {e}")
        full_settings = get_guild_settings(guild_id) or {}
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–µ—Ñ–æ–ª—Ç—ã
        full_settings.setdefault('reminder_time', [0,15])
        full_settings.setdefault('monitored_channels', [])
        source = "(fallback)"

    monitoring_enabled = bool(full_settings.get('monitoring_enabled', False))
    cleanup_enabled = bool(full_settings.get('cleanup_enabled', False))
    reminders_enabled = bool(full_settings.get('reminders_enabled', False))
    reminder_time = full_settings.get('reminder_time', [0,15])

    # –†–æ–ª–∏ (–æ–¥–∏–Ω–æ—á–Ω—ã–µ / –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ)
    event_creator_role_id = full_settings.get('event_creator_role')
    event_creator_role = interaction.guild.get_role(event_creator_role_id) if event_creator_role_id else None
    moderator_role_id = full_settings.get('moderator_role')
    moderator_role = interaction.guild.get_role(moderator_role_id) if moderator_role_id else None
    event_creator_roles = full_settings.get('event_creator_roles', [])
    role_mentions = []
    for rid in event_creator_roles:
        r = interaction.guild.get_role(rid)
        if r:
            role_mentions.append(r.mention)

    # –ö–∞–Ω–∞–ª—ã
    monitored_channel_ids = full_settings.get('monitored_channels', [])
    monitored_channels = []
    for ch_id in monitored_channel_ids:
        ch = interaction.guild.get_channel(ch_id)
        if ch:
            monitored_channels.append(ch.mention)

    monitoring_time = full_settings.get('monitoring_time', [10,20])
    cleanup_time = full_settings.get('cleanup_time', [0,0])
    monitoring_time_str = f"{monitoring_time[0]:02d}:00‚Äì{monitoring_time[1]:02d}:00 UTC" if monitoring_time else "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    cleanup_time_str = f"{cleanup_time[0]:02d}:{cleanup_time[1]:02d} UTC" if cleanup_time else "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"

    ping_val = full_settings.get('ping_role', 'everyone')
    if ping_val == 'everyone':
        ping_text = '@everyone'
    else:
        role_obj = interaction.guild.get_role(ping_val)
        ping_text = role_obj.mention if role_obj else f"<@&{ping_val}>"

    data_source = source

    embed = discord.Embed(
        title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞", 
        description=f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è **{interaction.guild.name}**\nüìç **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** {data_source}",
        color=0x00FF00
    )
    
    # –†–æ–ª–∏ (—Å—Ç–∞—Ä–∞—è –∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
    roles_value = ""
    if event_creator_role:
        roles_value += f"üéÆ **–°–æ–∑–¥–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∞—Ä–∞—è):** {event_creator_role.mention}\n"
    if role_mentions:
        roles_value += f"üé≠ **–†–æ–ª–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π (–Ω–æ–≤–∞—è):** {', '.join(role_mentions)}\n"
    if moderator_role:
        roles_value += f"üõ°Ô∏è **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator_role.mention}\n"
    
    if not roles_value:
        roles_value = "‚ùå –†–æ–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    
    embed.add_field(
        name="üë• –†–æ–ª–∏ –∏ –ø—Ä–∞–≤–∞",
        value=roles_value,
        inline=False
    )
    
    embed.add_field(
        name="üì∫ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã",
        value="\n".join(monitored_channels) if monitored_channels else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
        inline=False
    )
    
    embed.add_field(
        name="‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        value=f"üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** {monitoring_time_str}\nüßπ **–û—á–∏—Å—Ç–∫–∞:** {cleanup_time_str}",
        inline=False
    )
    
    embed.add_field(
        name="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        value=f"üì¢ **–ü–∏–Ω–≥ –ø—Ä–∏ —Å–æ–±—ã—Ç–∏—è—Ö:** {ping_text}\n"
              f"‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if reminders_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'} "
              f"(–∑–∞ {reminder_time[0]}—á {reminder_time[1]}–º)",
        inline=False
    )
    
    embed.add_field(
        name="üîß –°—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–π",
        value=f"üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤:** {'‚úÖ –í–∫–ª—é—á–µ–Ω' if monitoring_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n"
              f"üßπ **–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞:** {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if cleanup_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}",
        inline=False
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–ø–∞–Ω–µ–ª—å
    base_url = "http://localhost:8082"  # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    embed.add_field(
        name="üåê –í–µ–±-—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
        value=f"[üìã –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å]({base_url}/guild/{guild_id})\n"
              f"[üé≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π]({base_url}/guild/{guild_id}/role-settings)\n"
              f"[üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–±—ã—Ç–∏–π]({base_url}/guild/{guild_id}/templates)",
        inline=False
    )
    
    embed.set_footer(text="üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    embed.set_footer(text=f"–ó–∞–≥—Ä—É–∑–∫–∞ {int((_t.time()-started)*1000)} –º—Å")
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="party", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞–º–∏")
@app_commands.describe(
    action="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    template="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞)",
    days="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)"
)
@app_commands.choices(action=[
    app_commands.Choice(name="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–≤–µ–Ω—Ç", value="create"),
    app_commands.Choice(name="üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", value="stats"),
    app_commands.Choice(name="üìã –°–æ–∑–¥–∞—Ç—å –∏–∑ —à–∞–±–ª–æ–Ω–∞", value="from_template"),
    app_commands.Choice(name="üìÑ –í—ã–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", value="history")
])
async def party_command(
    interaction: discord.Interaction, 
    action: str,
    template: str = None,
    days: int = 30
):
    if action == "create":
        await create_party_modal(interaction)
    elif action == "stats":
        await show_stats(interaction)
    elif action == "from_template":
        if not template:
            await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", ephemeral=True)
            return
        await use_template_action(interaction, template)
    elif action == "history":
        await export_history_action(interaction, days)

async def create_party_modal(interaction: discord.Interaction):
    class PartyModal(ui.Modal, title="–°–æ–∑–¥–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞"):
        name = ui.TextInput(label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞", required=True)
        desc = ui.TextInput(label="–û–ø–∏—Å–∞–Ω–∏–µ", style=discord.TextStyle.paragraph, required=False)
        time = ui.TextInput(label="–í—Ä–µ–º—è –∏–≤–µ–Ω—Ç–∞", required=False)
        roles = ui.TextInput(label="–†–æ–ª–∏ (–ø–æ —Å—Ç—Ä–æ–∫–∞–º)", style=discord.TextStyle.paragraph, required=True)

        async def on_submit(self, interaction: discord.Interaction):
            role_list = [r.strip() for r in self.roles.value.strip().splitlines() if r.strip()]
            if not role_list:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å", ephemeral=True)
                return
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–æ–ª–µ–π
            if len(role_list) > 50:
                await interaction.response.send_message("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–ª–µ–π (–º–∞–∫—Å–∏–º—É–º 50). –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π.", ephemeral=True)
                return
            elif len(role_list) > 25:
                # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ —Ä–æ–ª–∏ –±—É–¥—É—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω—ã
                pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            
            event_id = interaction.message.id if interaction.message else interaction.id

            embed = discord.Embed(
                title=self.name.value.strip(),
                description=self.desc.value.strip(),
                color=0x00FF00
            )
            if self.time.value.strip():
                embed.add_field(name="–í—Ä–µ–º—è", value=self.time.value.strip(), inline=False)
            embed.add_field(name="–†–æ–ª–∏", value="\n".join([f"{i+1}. {r} ‚Äî –°–≤–æ–±–æ–¥–Ω–æ" for i, r in enumerate(role_list)]), inline=False)

            guild_id = str(interaction.guild_id)
            ping_val = get_guild_setting(interaction.guild.id, "ping_role", "everyone")
            if ping_val == "everyone":
                ping_text = "@everyone"
                allowed_mentions = discord.AllowedMentions(everyone=True)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                role = interaction.guild.get_role(int(ping_val))
                ping_text = role.mention if role and role.mentionable else "@everyone"
                allowed_mentions = discord.AllowedMentions(everyone=True) if ping_text == "@everyone" else discord.AllowedMentions(roles=True)

            msg = await interaction.channel.send(
                f"{ping_text}\n"
                f"**{self.name.value.strip()}**\n"
                f"{self.desc.value.strip()}\n\n"
                f"**–í—Ä–µ–º—è:** {self.time.value.strip() or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"**–†–æ–ª–∏:**\n" + 
                "\n".join([f"{i+1}. {r} ‚Äî –°–≤–æ–±–æ–¥–Ω–æ" for i, r in enumerate(role_list)]),
                allowed_mentions=allowed_mentions
            )
            thread = await msg.create_thread(name=self.name.value.strip())

            ALL_SESSIONS[str(msg.id)] = {
                "guild_id": interaction.guild.id,
                "channel_id": interaction.channel.id,
                "main_msg_id": msg.id,
                "thread_id": thread.id,
                "title": self.name.value.strip(),
                "description": self.desc.value.strip(),
                "time": self.time.value.strip(),
                "party_roles": [{"name": r, "user_id": None} for r in role_list],
                "creator_id": interaction.user.id,
                "stopped": False,
                "last_reminder_time": 0
            }
            save_all_data()
            save_event(msg.id, ALL_SESSIONS[str(msg.id)])
            await update_party_message(msg.id, interacting_user_id=interaction.user.id)
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞
            response_text = f"–ò–≤–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {msg.jump_url}"
            if len(role_list) > 25:
                response_text += f"\nüí° –†–æ–ª–µ–π –º–Ω–æ–≥–æ ({len(role_list)}), –æ–Ω–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞"
            
            await interaction.response.send_message(response_text, ephemeral=True)

    modal = PartyModal()
    await interaction.response.send_modal(modal)

async def show_stats(interaction: discord.Interaction):
    guild = interaction.guild
    if not guild:
        await interaction.response.send_message("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return
    if not PARTY_STATS:
        await interaction.response.send_message("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.", ephemeral=True)
        return

    lines = []
    for user_id, sessions in PARTY_STATS.items():
        member = guild.get_member(user_id)
        name = member.display_name if member else f"User ID: {user_id}"
        lines.append(f"**{name}**: {len(sessions)} –ø–æ—Å–µ—â–µ–Ω–∏–π")
    text = "\n".join(lines)
    await interaction.response.send_message(f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:**\n{text}", ephemeral=True)

async def use_template_action(interaction: discord.Interaction, template: str):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    template_data = get_guild_template(interaction.guild.id, template)
    if not template_data:
        await interaction.response.send_message("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
        return
    guild_id = str(interaction.guild_id)
    ping_val = get_guild_setting(interaction.guild.id, "ping_role", "everyone")
    if ping_val == "everyone":
        ping_text = "@everyone"
        allowed_mentions = discord.AllowedMentions(everyone=True)
    else:
        role = interaction.guild.get_role(int(ping_val))
        ping_text = role.mention if role and role.mentionable else "@everyone"
        allowed_mentions = discord.AllowedMentions(everyone=True) if ping_text == "@everyone" else discord.AllowedMentions(roles=True)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"{ping_text}\n"
        f"**{template_data['title']}**\n"
        f"{template_data['description']}\n\n"
        "**–†–æ–ª–∏:**\n" + "\n".join([f"{i+1}. {r} ‚Äî –°–≤–æ–±–æ–¥–Ω–æ" for i, r in enumerate(template_data["roles"])])
    )

    msg = await interaction.channel.send(text, allowed_mentions=allowed_mentions)
    thread = await msg.create_thread(name=template_data["title"])

    ALL_SESSIONS[str(msg.id)] = {
        "guild_id": interaction.guild.id,
        "channel_id": interaction.channel.id,
        "main_msg_id": msg.id,
        "thread_id": thread.id,
        "title": template_data["title"],
        "description": template_data["description"],
        "time": "",
        "party_roles": [{"name": r, "user_id": None} for r in template_data["roles"]],
        "creator_id": interaction.user.id,
        "stopped": False,
        "last_reminder_time": 0
    }
    save_all_data()
    save_event(msg.id, ALL_SESSIONS[str(msg.id)])
    await update_party_message(msg.id, interacting_user_id=interaction.user.id)
    
    await interaction.response.send_message(f"‚úÖ –ò–≤–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{template}'", ephemeral=True)

async def export_history_action(interaction: discord.Interaction, days: int = 30):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É", ephemeral=True)
        return
        
    await interaction.response.defer(ephemeral=True)
    
    guild = interaction.guild
    history = []
    current_time = datetime.now()
    cutoff = current_time - timedelta(days=days)

    for session_id, session in ALL_SESSIONS.items():
        if session["guild_id"] != guild.id:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ session_id (–µ—Å–ª–∏ —ç—Ç–æ snowflake)
        try:
            timestamp = int(session_id) / 1000
            created_at = datetime.fromtimestamp(timestamp)
        except Exception:
            created_at = None

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        if created_at and created_at < cutoff:
            continue

        try:
            event_info = [
                f"=== –ò–≤–µ–Ω—Ç: {session['title']} ===",
                f"ID: {session_id}",
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at.strftime('%d.%m.%Y %H:%M') if created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {guild.get_member(session['creator_id']).display_name if guild.get_member(session['creator_id']) else session['creator_id']}",
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {session['description']}",
                f"–í—Ä–µ–º—è: {session.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                f"–°—Ç–∞—Ç—É—Å: {'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if session.get('stopped') else '–ê–∫—Ç–∏–≤–µ–Ω'}",
                "\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:",
            ]
            
            for role in session["party_roles"]:
                user_id = role.get("user_id")
                if user_id:
                    member = guild.get_member(user_id)
                    event_info.append(f"  {role['name']}: {member.display_name if member else user_id}")
                else:
                    event_info.append(f"  {role['name']}: –°–≤–æ–±–æ–¥–Ω–æ")
            
            history.append("\n".join(event_info) + "\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ {session_id}: {e}")
            continue
    
    if not history:
        await interaction.followup.send("–ò–≤–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", ephemeral=True)
        return
        
    filename = f"events_history_{guild.name}_{current_time.strftime('%Y%m%d_%H%M')}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write("\n\n".join(history))
        
    await interaction.followup.send(
        f"üìÑ –ò—Å—Ç–æ—Ä–∏—è –∏–≤–µ–Ω—Ç–æ–≤ –∑–∞ {days} –¥–Ω–µ–π:",
        file=discord.File(filename),
        ephemeral=True
    )
    
    os.remove(filename)


async def stats(interaction: discord.Interaction):
    guild = interaction.guild
    if not guild:
        await interaction.response.send_message("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", ephemeral=True)
        return
    if not PARTY_STATS:
        await interaction.response.send_message("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞.", ephemeral=True)
        return

    lines = []
    for user_id, sessions in PARTY_STATS.items():
        member = guild.get_member(user_id)
        name = member.display_name if member else f"User ID: {user_id}"
        lines.append(f"**{name}**: {len(sessions)} –ø–æ—Å–µ—â–µ–Ω–∏–π")
    text = "\n".join(lines)
    await interaction.response.send_message(f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π:**\n{text}", ephemeral=True)

# –ö–û–ú–ê–ù–î–ê SETUP –û–¢–ö–õ–Æ–ß–ï–ù–ê –í –ü–û–õ–¨–ó–£ –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê
# –ö–æ–º–∞–Ω–¥–∞ setup —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π


@app_commands.describe(days="–ó–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)")
async def export_history(interaction: discord.Interaction, days: int = 30):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É", ephemeral=True)
        return
        
    await interaction.response.defer(ephemeral=True)
    
    guild = interaction.guild
    history = []
    current_time = datetime.now()
    cutoff = current_time - timedelta(days=days)

    for session_id, session in ALL_SESSIONS.items():
        if session["guild_id"] != guild.id:
            continue

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ session_id (–µ—Å–ª–∏ —ç—Ç–æ snowflake)
        try:
            timestamp = int(session_id) / 1000
            created_at = datetime.fromtimestamp(timestamp)
        except Exception:
            created_at = None

        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        if created_at and created_at < cutoff:
            continue

        try:
            event_info = [
                f"=== –ò–≤–µ–Ω—Ç: {session['title']} ===",
                f"ID: {session_id}",
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at.strftime('%d.%m.%Y %H:%M') if created_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {guild.get_member(session['creator_id']).display_name if guild.get_member(session['creator_id']) else session['creator_id']}",
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {session['description']}",
                f"–í—Ä–µ–º—è: {session.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                f"–°—Ç–∞—Ç—É—Å: {'–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if session.get('stopped') else '–ê–∫—Ç–∏–≤–µ–Ω'}",
                "\n–£—á–∞—Å—Ç–Ω–∏–∫–∏:",
            ]
            
            for role in session["party_roles"]:
                user_id = role.get("user_id")
                if user_id:
                    member = guild.get_member(user_id)
                    user_name = member.display_name if member else f"ID: {user_id}"
                    event_info.append(f"- {role['name']}: {user_name}")
                else:
                    event_info.append(f"- {role['name']}: –°–≤–æ–±–æ–¥–Ω–æ")
            
            history.append("\n".join(event_info) + "\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≤–µ–Ω—Ç–∞ {session_id}: {e}")
            continue
    
    if not history:
        await interaction.followup.send("–ò–≤–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", ephemeral=True)
        return
        
    filename = f"events_history_{guild.name}_{current_time.strftime('%Y%m%d_%H%M')}.txt"
    with open(filename, "w", encoding="utf-8") as f:
        f.write("\n\n".join(history))
        
    await interaction.followup.send(
        f"üìÑ –ò—Å—Ç–æ—Ä–∏—è –∏–≤–µ–Ω—Ç–æ–≤ –∑–∞ {days} –¥–Ω–µ–π:",
        file=discord.File(filename),
        ephemeral=True
    )
    
    os.remove(filename)

@bot.tree.command(name="templates", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
@app_commands.describe(
    action="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    template="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ (–¥–ª—è –ø–æ–∫–∞–∑–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è)"
)
@app_commands.choices(action=[
    app_commands.Choice(name="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω", value="create"),
    app_commands.Choice(name="üìã –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤", value="list"),
    app_commands.Choice(name="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", value="show"),
    app_commands.Choice(name="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", value="edit"),
    app_commands.Choice(name="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", value="delete")
])
async def templates_command(
    interaction: discord.Interaction, 
    action: str,
    template: str = None
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —à–∞–±–ª–æ–Ω–∞–º–∏", ephemeral=True)
        return
    
    try:
        if action == "create":
            await create_template_modal(interaction)
        elif action == "list":
            await interaction.response.defer(ephemeral=True)
            await list_templates_action(interaction)
        elif action == "show":
            if not template:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", ephemeral=True)
                return
            await show_template_details(interaction, template)
        elif action == "edit":
            if not template:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", ephemeral=True)
                return
            await edit_template_modal(interaction, template)
        elif action == "delete":
            if not template:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", ephemeral=True)
                return
            await delete_template_action(interaction, template)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ templates_command: {e}")
        try:
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
        except Exception as followup_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {followup_error}")
            pass

@bot.tree.command(name="links", description="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
@app_commands.describe(
    show_in_channel="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ (–∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –≤–∞–º)"
)
async def links_command(
    interaction: discord.Interaction,
    show_in_channel: bool = False
):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–µ–∑–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not interaction.guild:
            await interaction.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ
        if show_in_channel and not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ", ephemeral=True)
            return
        
        guild_id = interaction.guild.id
        base_url = "http://localhost:8082"  # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        
        embed = discord.Embed(
            title="üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            description=f"–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ **{interaction.guild.name}**",
            color=discord.Color.blue()
        )
        
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
        if interaction.user.guild_permissions.administrator:
            embed.add_field(
                name="üëë –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤",
                value=(
                    f"üõ†Ô∏è [–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å]({base_url}/guild/{guild_id})\n"
                    f"‚öôÔ∏è [–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞]({base_url}/guild/{guild_id}/settings)\n"
                    f"üìä [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]({base_url}/guild/{guild_id}/stats)\n"
                    f"üìù [–®–∞–±–ª–æ–Ω—ã —Å–æ–±—ã—Ç–∏–π]({base_url}/guild/{guild_id}/templates)"
                ),
                inline=False
            )
        
        # –°—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        embed.add_field(
            name="üë• –î–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            value=(
                f"üéÆ [–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ]({base_url}/guild/{guild_id}/events/guest)\n"
                f"üìã [–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π]({base_url}/guild/{guild_id}/events)\n"
                f"üèÜ [–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]({base_url}/guild/{guild_id}/stats)"
            ),
            inline=False
        )
        
        embed.add_field(
            name="üìö –°–ø—Ä–∞–≤–∫–∞",
            value=(
                f"‚ùì –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                f"üÜî [–£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID]({base_url}/my-id)"
            ),
            inline=False
        )
        
        embed.set_footer(text="üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ —Å—Å—ã–ª–∫–∏ –≤ –∑–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        view = ui.View(timeout=None)
        create_button = ui.Button(
            label="üéÆ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ",
            style=discord.ButtonStyle.primary,
            url=f"{base_url}/guild/{guild_id}/events/guest"
        )
        view.add_item(create_button)
        
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏
        if interaction.user.guild_permissions.administrator:
            admin_button = ui.Button(
                label="üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
                style=discord.ButtonStyle.secondary,
                url=f"{base_url}/guild/{guild_id}"
            )
            view.add_item(admin_button)
        
        await interaction.response.send_message(
            embed=embed, 
            view=view, 
            ephemeral=not show_in_channel
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ links_command: {e}")
        try:
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
        except Exception as followup_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {followup_error}")
            pass

@bot.tree.command(name="role-links", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π")
@app_commands.describe(
    action="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    role="–†–æ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"
)
@app_commands.choices(action=[
    app_commands.Choice(name="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏", value="settings"),
    app_commands.Choice(name="üîó –ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏", value="show"),
    app_commands.Choice(name="üìã –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–æ–ª–∏", value="role_link")
])
async def role_links_command(
    interaction: discord.Interaction,
    action: str,
    role: discord.Role = None
):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""
    try:
        if not interaction.guild:
            await interaction.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª–µ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–ª–µ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏", ephemeral=True)
            return
        
        guild_id = interaction.guild.id
        base_url = "http://localhost:8082"  # TODO: –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        
        if action == "settings":
            embed = discord.Embed(
                title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–≤—ã—Ö —Å—Å—ã–ª–æ–∫",
                description=f"–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è:",
                color=discord.Color.blue()
            )
            
            embed.add_field(
                name="üõ†Ô∏è –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                value=f"[–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏]({base_url}/guild/{guild_id}/role-settings)",
                inline=False
            )
            
            embed.add_field(
                name="üìö –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                value=(
                    "‚Ä¢ –í—ã–±–æ—Ä —Ä–æ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π\n"
                    "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                ),
                inline=False
            )
            
            view = ui.View(timeout=None)
            settings_button = ui.Button(
                label="‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                style=discord.ButtonStyle.primary,
                url=f"{base_url}/guild/{guild_id}/role-settings"
            )
            view.add_item(settings_button)
            
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            
        elif action == "show":
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
            try:
                from unified_settings import get_guild_setting
                event_roles = get_guild_setting(guild_id, "event_creator_roles", [])
                if not event_roles:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
                    old_role = get_guild_setting(guild_id, "event_creator_role")
                    if old_role:
                        event_roles = [old_role]
            except:
                event_roles = []
            
            if not event_roles:
                embed = discord.Embed(
                    title="‚ùå –†–æ–ª–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã",
                    description=f"–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ–ª–∏ –≤ [–≤–µ–±-–ø–∞–Ω–µ–ª–∏]({base_url}/guild/{guild_id}/role-settings)",
                    color=discord.Color.orange()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            embed = discord.Embed(
                title="üîó –†–æ–ª–µ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π",
                description="–°—Å—ã–ª–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ—Å–æ–±—ã–º–∏ —Ä–æ–ª—è–º–∏:",
                color=discord.Color.green()
            )
            
            for role_id in event_roles:
                role_obj = interaction.guild.get_role(role_id)
                if role_obj:
                    link = f"{base_url}/guild/{guild_id}/events/role/{role_id}"
                    embed.add_field(
                        name=f"üé≠ {role_obj.name}",
                        value=f"[–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π]({link})",
                        inline=False
                    )
            
            embed.set_footer(text="üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–æ–ª–µ–π")
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        elif action == "role_link":
            if not role:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏", ephemeral=True)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ —ç—Ç–∞ —Ä–æ–ª—å
            try:
                from unified_settings import get_guild_setting
                event_roles = get_guild_setting(guild_id, "event_creator_roles", [])
                if not event_roles:
                    old_role = get_guild_setting(guild_id, "event_creator_role")
                    if old_role:
                        event_roles = [old_role]
            except:
                event_roles = []
            
            if role.id not in event_roles:
                embed = discord.Embed(
                    title="‚ùå –†–æ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞",
                    description=(
                        f"–†–æ–ª—å **{role.name}** –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.\n"
                        f"–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ—ë –≤ [–≤–µ–±-–ø–∞–Ω–µ–ª–∏]({base_url}/guild/{guild_id}/role-settings)"
                    ),
                    color=discord.Color.red()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            link = f"{base_url}/guild/{guild_id}/events/role/{role.id}"
            
            embed = discord.Embed(
                title=f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —Ä–æ–ª–∏ {role.name}",
                description=(
                    f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é **{role.name}** –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É "
                    f"–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏:"
                ),
                color=role.color if role.color != discord.Color.default() else discord.Color.blue()
            )
            
            embed.add_field(
                name="üéÆ –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π",
                value=f"[–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–±—ã—Ç–∏–π]({link})",
                inline=False
            )
            
            embed.add_field(
                name="üìã –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞",
                value=f"`{link}`",
                inline=False
            )
            
            embed.set_footer(text="üí° –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–π —Ä–æ–ª–∏")
            
            view = ui.View(timeout=None)
            open_button = ui.Button(
                label="üéÆ –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É",
                style=discord.ButtonStyle.link,
                url=link
            )
            view.add_item(open_button)
            
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ role_links_command: {e}")
        try:
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
        except Exception as followup_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {followup_error}")
            pass

async def create_template_modal(interaction: discord.Interaction):
    try:
        if not interaction.guild:
            await interaction.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö", ephemeral=True)
            return
            
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", ephemeral=True)
            return
            
        class TemplateModal(ui.Modal, title="–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"):
            template_name = ui.TextInput(
                label="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞",
                required=True,
                max_length=100
            )
            
            template_title = ui.TextInput(
                label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
                required=True,
                max_length=100
            )
            
            template_desc = ui.TextInput(
                label="–û–ø–∏—Å–∞–Ω–∏–µ",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
                style=discord.TextStyle.paragraph,
                required=False,
                max_length=1000
            )
            
            template_roles = ui.TextInput(
                label="–†–æ–ª–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
                placeholder="–¢–∞–Ω–∫\n–•–∏–ª\n–î–î",
                style=discord.TextStyle.paragraph,
                required=True,
                max_length=1000
            )

            async def on_submit(self, interaction: discord.Interaction):
                name = self.template_name.value.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–µ–π
                roles = [r.strip() for r in self.template_roles.value.strip().splitlines() if r.strip()]
                if not roles:
                    await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å", ephemeral=True)
                    return

                # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                set_guild_template(interaction.guild.id, name, {
                    "title": self.template_title.value.strip(),
                    "description": self.template_desc.value.strip(),
                    "roles": roles
                })
                
                await interaction.response.send_message(
                    f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/events_template {name}` —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", 
                    ephemeral=True
                )

        await interaction.response.send_modal(TemplateModal())
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ create_template_modal: {e}")
        if not interaction.response.is_done():
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", ephemeral=True)
        else:
            await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", ephemeral=True)

async def list_templates_action(interaction: discord.Interaction):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥–∏–ª—å–¥–∏–∏
        if not interaction.guild:
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö", ephemeral=True)
            return
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        guild_templates = get_guild_templates(interaction.guild.id)
        if not guild_templates:
            if not interaction.response.is_done():
                await interaction.response.send_message("‚ùå –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤", ephemeral=True)
            else:
                await interaction.followup.send("‚ùå –ù–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤", ephemeral=True)
            return

        names = "\n".join([f"‚Ä¢ {name}" for name in guild_templates.keys()])
        message = (
            f"üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:**\n{names}\n\n"
            f"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/templates_show <–Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞>`"
        )
        
        if not interaction.response.is_done():
            await interaction.response.send_message(message, ephemeral=True)
        else:
            await interaction.followup.send(message, ephemeral=True)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ list_templates_action: {e}")
        if not interaction.response.is_done():
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤", ephemeral=True)
        else:
            await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤", ephemeral=True)

async def show_template_details(interaction: discord.Interaction, template: str):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    template_data = get_guild_template(interaction.guild.id, template)
    if not template_data:
        await interaction.response.send_message("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
        return
    
    roles = "\n".join([f"‚Ä¢ {role}" for role in template_data["roles"]])
    await interaction.response.send_message(
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞:** {template}\n"
        f"**–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞:** {template_data['title']}\n"
        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {template_data['description']}\n"
        f"**–†–æ–ª–∏:**\n{roles}",
        ephemeral=True
    )

async def edit_template_modal(interaction: discord.Interaction, template: str):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã", ephemeral=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    template_data = get_guild_template(interaction.guild.id, template)
    if not template_data:
        await interaction.response.send_message("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
        return

    class EditTemplateModal(ui.Modal, title=f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ '{template}'"):
        template_title = ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
            required=True,
            max_length=100,
            default=template_data["title"]
        )
        
        template_desc = ui.TextInput(
            label="–û–ø–∏—Å–∞–Ω–∏–µ",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=1000,
            default=template_data["description"]
        )
        
        template_roles = ui.TextInput(
            label="–†–æ–ª–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
            placeholder="–¢–∞–Ω–∫\n–•–∏–ª\n–î–î",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000,
            default="\n".join(template_data["roles"])
        )

        async def on_submit(self, interaction: discord.Interaction):
            roles = [r.strip() for r in self.template_roles.value.strip().splitlines() if r.strip()]
            if not roles:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å", ephemeral=True)
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —à–∞–±–ª–æ–Ω—ã —Å–µ—Ä–≤–µ—Ä–∞
            set_guild_template(interaction.guild.id, template, {
                "title": self.template_title.value.strip(),
                "description": self.template_desc.value.strip(),
                "roles": roles
            })
            
            await interaction.response.send_message(
                f"‚úÖ –®–∞–±–ª–æ–Ω '{template}' –æ–±–Ω–æ–≤–ª–µ–Ω!", 
                ephemeral=True
            )

    try:
        await interaction.response.send_modal(EditTemplateModal())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await interaction.response.send_message(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", 
            ephemeral=True
        )

async def delete_template_action(interaction: discord.Interaction, template: str):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —à–∞–±–ª–æ–Ω—ã", ephemeral=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    if not delete_guild_template(interaction.guild.id, template):
        await interaction.response.send_message("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
        return
    
    await interaction.response.send_message(f"‚úÖ –®–∞–±–ª–æ–Ω '{template}' —É–¥–∞–ª–µ–Ω", ephemeral=True)


async def create_template(interaction: discord.Interaction):
    class TemplateModal(ui.Modal, title="–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞"):
        template_name = ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞",
            required=True,
            max_length=100
        )
        
        template_title = ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
            required=True,
            max_length=100
        )
        
        template_desc = ui.TextInput(
            label="–û–ø–∏—Å–∞–Ω–∏–µ",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=1000
        )
        
        template_roles = ui.TextInput(
            label="–†–æ–ª–∏ (–∫–∞–∂–¥–∞—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)",
            placeholder="–¢–∞–Ω–∫\n–•–∏–ª\n–î–î",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000
        )

        async def on_submit(self, interaction: discord.Interaction):
            name = self.template_name.value.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–µ–π
            roles = [r.strip() for r in self.template_roles.value.strip().splitlines() if r.strip()]
            if not roles:
                await interaction.response.send_message("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å", ephemeral=True)
                return

            # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            set_guild_template(interaction.guild.id, name, {
                "title": self.template_title.value.strip(),
                "description": self.template_desc.value.strip(),
                "roles": roles
            })
            
            await interaction.response.send_message(
                f"‚úÖ –®–∞–±–ª–æ–Ω '{name}' —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/events_template {name}` —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", 
                ephemeral=True
            )

    try:
        await interaction.response.send_modal(TemplateModal())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        await interaction.response.send_message(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞", 
            ephemeral=True
        )


@app_commands.describe(template="–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞", time="–í—Ä–µ–º—è –∏–≤–µ–Ω—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
async def use_template(interaction: discord.Interaction, template: str, time: str = None):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    template_data = get_guild_template(interaction.guild.id, template)
    if not template_data:
        await interaction.response.send_message("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
        return
    guild_id = str(interaction.guild_id)
    ping_val = get_guild_setting(interaction.guild.id, "ping_role", "everyone")
    if ping_val == "everyone":
        ping_text = "@everyone"
        allowed_mentions = discord.AllowedMentions(everyone=True)
    else:
        role = interaction.guild.get_role(int(ping_val))
        ping_text = role.mention if role and role.mentionable else "@everyone"
        allowed_mentions = discord.AllowedMentions(everyone=True) if ping_text == "@everyone" else discord.AllowedMentions(roles=True)

    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"{ping_text}\n"
        f"**{template_data['title']}**\n"
        f"{template_data['description']}\n\n"
    )
    if time:
        text += f"**–í—Ä–µ–º—è:** {time}\n\n"
    role_list = template_data["roles"]
    text += "**–†–æ–ª–∏:**\n" + "\n".join([f"{i+1}. {r} ‚Äî –°–≤–æ–±–æ–¥–Ω–æ" for i, r in enumerate(role_list)])

    msg = await interaction.channel.send(text, allowed_mentions=allowed_mentions)
    thread = await msg.create_thread(name=template_data["title"])

    ALL_SESSIONS[str(msg.id)] = {
        "guild_id": interaction.guild.id,
        "channel_id": interaction.channel.id,
        "main_msg_id": msg.id,
        "thread_id": thread.id,
        "title": template_data["title"],
        "description": template_data["description"],
        "time": time or "",
        "party_roles": [{"name": r, "user_id": None} for r in role_list],
        "creator_id": interaction.user.id,
        "stopped": False,
        "last_reminder_time": 0
    }
    save_all_data()
    save_event(msg.id, ALL_SESSIONS[str(msg.id)])
    await update_party_message(msg.id, interacting_user_id=interaction.user.id)
    await interaction.response.send_message(f"‚úÖ –ò–≤–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞ '{template}'", ephemeral=True)


@bot.event
async def on_ready():
    print("=" * 60)
    print(f"ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    print(f"üìõ –ò–º—è –±–æ—Ç–∞: {bot.user.name}")
    print(f"üÜî ID –±–æ—Ç–∞: {bot.user.id}")
    print(f"üîó –î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä: #{bot.user.discriminator}")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üåê –°–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {len(bot.guilds)}")
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∏–¥–Ω–æ: {len(set(bot.get_all_members()))}")
    print(f"üìä –í–µ—Ä—Å–∏—è Discord.py: {discord.__version__}")
    print(f"üêç –í–µ—Ä—Å–∏—è Python: {sys.version.split()[0]}")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
    if bot.guilds:
        print("üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:")
        for guild in bot.guilds:
            print(f"  ‚Ä¢ {guild.name} (ID: {guild.id}) - {guild.member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    print("=" * 60)
    
    try:
        await setup_persistent_views()
        print("‚úÖ Persistent views –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º RecruitPot (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω) –¥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥
        if RECRUIT_AVAILABLE:
            try:
                await recruit_init_db()
                await bot.add_cog(RecruitCog(bot))
                print("‚úÖ RecruitCog –ø–æ–¥–∫–ª—é—á–µ–Ω (ReqrutPot)")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å RecruitCog: {e}")

        synced = await bot.tree.sync()
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ({len(synced)} –∫–æ–º–∞–Ω–¥)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if synced:
            print("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            for cmd in synced:
                print(f"  ‚Ä¢ /{cmd.name} - {cmd.description}")
        
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        bot.loop.create_task(monitor_channel_activity())
        print("üîç –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
        
        bot.loop.create_task(cleanup_channels())
        print("üßπ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
        
        bot.loop.create_task(connection_monitor())
        print("üì° –ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∑–∞–ø—É—â–µ–Ω")
        
        bot.loop.create_task(process_command_queue())
        print("‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ –∑–∞–ø—É—â–µ–Ω")
        
        bot.loop.create_task(update_bot_stats())
        print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω–æ")
        
        print("=" * 60)
        print(f"üü¢ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

    # –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–¥–∏–Ω —Ä–∞–∑)
    if RECRUIT_AVAILABLE:
        try:
            # –î–æ—Å—Ç—É–ø –∫ unified_settings, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª—Å—è
            from ..unified_settings import unified_settings as _unified_settings_local  # type: ignore
        except Exception:
            _unified_settings_local = None
        if _unified_settings_local is not None:
            for guild in bot.guilds:
                try:
                    rs = _unified_settings_local.get_recruit_settings(guild.id)
                    onboarding_sent = bool(rs.get("onboarding_sent", False))
                    forum = rs.get("forum_channel")
                    recruit_panel = rs.get("recruit_panel_channel")
                    points_panel = rs.get("points_panel_channel")
                    if not onboarding_sent and not (forum and (recruit_panel or points_panel)):
                        await _send_onboarding(guild)
                        rs["onboarding_sent"] = True
                        _unified_settings_local.update_recruit_settings(guild.id, rs)
                except Exception:
                    continue

async def setup_persistent_views():
    for session_id in ALL_SESSIONS.keys():
        view = PartySelectView(int(session_id), 0)
        bot.add_view(view)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ UI –∏–∑ ReqrutPot, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if RECRUIT_AVAILABLE:
        try:
            # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            apply_view = PersistentApplyButtonView(bot)
            bot.add_view(apply_view)
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã /apply –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –µ—ë
            try:
                recruit_bot_module.persistent_view = apply_view
            except Exception:
                pass
            
            bot.add_view(PersistentEventSubmitView())
            bot.add_view(UnifiedEventView())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ RecruitPot views: {e}")

# ‚îÄ‚îÄ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ/–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def _find_announce_channel(guild: discord.Guild) -> Optional[discord.abc.Messageable]:
    if guild.system_channel and guild.system_channel.permissions_for(guild.me).send_messages:
        return guild.system_channel
    for ch in guild.text_channels:
        try:
            if ch.permissions_for(guild.me).send_messages:
                return ch
        except Exception:
            continue
    return None

async def _send_onboarding(guild: discord.Guild):
    url = "http://localhost:8082"
    try:
        channel = _find_announce_channel(guild)
        embed = discord.Embed(
            title="üéâ –ë–æ—Ç PartyBot —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω!",
            description=(
                f"**–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:** {url}/guild/{guild.id}\n"
                f"**–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π:** {url}/guild/{guild.id}/events/guest\n\n"
                "**–ß—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ:**\n"
                "‚Ä¢ –ü–∞–Ω–µ–ª–∏ —Ä–µ–∫—Ä—É—Ç–∞ –∏ –æ—á–∫–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                "‚Ä¢ –§–æ—Ä—É–º-–∫–∞–Ω–∞–ª—ã –∏ —Ä–æ–ª–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤\n"
                "‚Ä¢ –®–∞–±–ª–æ–Ω—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è\n\n"
                "**–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç:**\n"
                "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ\n"
                "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –æ—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
            ),
            color=discord.Color.green()
        )
        embed.add_field(
            name="üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", 
            value=(
                f"[–ê–¥–º–∏–Ω–∫–∞]({url}/guild/{guild.id}) ‚Ä¢ "
                f"[–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ]({url}/guild/{guild.id}/events/guest) ‚Ä¢ "
                f"[–í–µ–±-–ø–∞–Ω–µ–ª—å]({url}/guild/{guild.id})"
            ), 
            inline=False
        )
        embed.set_footer(text="–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–ø–µ—Ä—å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ!")
        
        if channel:
            await channel.send(embed=embed)
        else:
            owner = guild.owner or await guild.fetch_owner()
            try:
                await owner.send(embed=embed)
            except Exception:
                pass
    except Exception:
        pass

@bot.event
async def on_interaction(interaction: discord.Interaction):
    if interaction.type == discord.InteractionType.component:
        custom_id = interaction.data.get("custom_id", "")
        if custom_id.startswith("party_select_"):
            session_id = int(custom_id.split("_")[-1])
            view = PartySelectView(session_id, interaction.user.id)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await interaction.response.edit_message(view=view)


async def monitor_channel_activity():
    await bot.wait_until_ready()
    while not bot.is_closed():
        now_utc = datetime.now(timezone.utc)
        for guild in bot.guilds:
            guild_id = str(guild.id)
            start, end = get_guild_setting(guild.id, "monitoring_time", [10, 20])
            if start <= now_utc.hour < end:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è
                monitoring_enabled = get_guild_setting(guild.id, "monitoring_enabled", True)
                if not monitoring_enabled:
                    continue
                channels = get_guild_setting(guild.id, "monitored_channels", [])
                for channel_id in channels:
                    channel = guild.get_channel(channel_id)
                    if not channel:
                        continue
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    messages = [msg async for msg in channel.history(limit=1)]
                    if not messages:
                        continue
                    last_message = messages[0]
                    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π 1 —á–∞—Å
                    now = datetime.now(last_message.created_at.tzinfo)
                    if (now - last_message.created_at).total_seconds() > 4800:  # 1 —á–∞—Å
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
                        recent = [msg async for msg in channel.history(limit=3)]
                        poll_exists = any(
                            msg.author == bot.user and msg.embeds and msg.embeds[0].title == "üìä –ß–µ–º –∑–∞–π–º–µ–º—Å—è?"
                            for msg in recent
                        )
                        if poll_exists:
                            continue
                        # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—Ä–æ—Å–∞ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
                        guild_templates = get_guild_templates(guild.id)
                        options = list(guild_templates.keys())[:8]
                        text = (
                            "üìä **–ß–µ–º –∑–∞–π–º–µ–º—Å—è?**\n"
                            "–ì–æ–ª–æ—Å—É–µ–º –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! (15 –º–∏–Ω—É—Ç)\n\n" +
                            "\n".join([f"{i+1}. {opt}" for i, opt in enumerate(options)])
                        )
                        poll_msg = await channel.send(
                            f"@everyone\n{text}",
                            allowed_mentions=discord.AllowedMentions(everyone=True)
                        )
                        reactions = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£"]
                        for i in range(len(options)):
                            await poll_msg.add_reaction(reactions[i])
                        # –ñ–¥–µ–º 15 –º–∏–Ω—É—Ç
                        await asyncio.sleep(900)
                        poll_msg = await channel.fetch_message(poll_msg.id)
                        votes = []
                        for i in range(len(options)):
                            reaction_obj = discord.utils.get(poll_msg.reactions, emoji=reactions[i])
                            count = reaction_obj.count - 1 if reaction_obj else 0
                            template_name = options[i]
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                            template_data = get_guild_template(guild.id, template_name)
                            roles_count = len(template_data["roles"]) if template_data else 0
                            # "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–±–æ—Ä–∞" ‚Äî —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ
                            fill_ratio = count / roles_count if roles_count else 0
                            votes.append((template_name, count, fill_ratio))

                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ fill_ratio, –ø–æ—Ç–æ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
                        votes.sort(key=lambda x: (x[2], x[1]), reverse=True)
                        winner = votes[0][0] if votes and votes[0][1] > 0 else None
                        template_data = get_guild_template(guild.id, winner) if winner else None
                        if winner and template_data:
                            # template_data —É–∂–µ –ø–æ–ª—É—á–µ–Ω –≤—ã—à–µ
                            guild_id = str(guild.id)
                            ping_val = get_guild_setting(guild.id, "ping_role", "everyone")
                            if ping_val == "everyone":
                                ping_text = "@everyone"
                                allowed_mentions = discord.AllowedMentions(everyone=True)
                            else:
                                role = guild.get_role(int(ping_val))
                                ping_text = role.mention if role and role.mentionable else "@everyone"
                                allowed_mentions = discord.AllowedMentions(everyone=True) if ping_text == "@everyone" else discord.AllowedMentions(roles=True)

                            text = (
                                f"{ping_text}\n"
                                f"**{template_data['title']}**\n"
                                f"{template_data['description']}\n\n"
                                "**–†–æ–ª–∏:**\n" +
                                "\n".join([f"{i+1}. {r} ‚Äî –°–≤–æ–±–æ–¥–Ω–æ" for i, r in enumerate(template_data["roles"])])
                            )
                            msg = await channel.send(text, allowed_mentions=allowed_mentions)
                            thread = await msg.create_thread(name=template_data["title"])
                            event_creator_role_id = get_guild_setting(guild.id, "event_creator_role")
                            moderator_role_id = get_guild_setting(guild.id, "moderator_role")
                            creator_id = bot.user.id  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                            # –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω–æ–π —Ä–æ–ª—å—é
                            for member in guild.members:
                                if event_creator_role_id and any(r.id == event_creator_role_id for r in member.roles):
                                    creator_id = member.id
                                    break
                                if moderator_role_id and any(r.id == moderator_role_id for r in member.roles):
                                    creator_id = member.id
                                    break

                            ALL_SESSIONS[str(msg.id)] = {
                                "guild_id": guild.id,
                                "channel_id": channel.id,
                                "main_msg_id": msg.id,
                                "thread_id": thread.id,
                                "title": template_data["title"],
                                "description": template_data["description"],
                                "time": "",
                                "party_roles": [{"name": r, "user_id": None} for r in template_data["roles"]],
                                "creator_id": creator_id,
                                "stopped": False,
                                "last_reminder_time": 0
                            }
                            save_all_data()
                            save_event(msg.id, ALL_SESSIONS[str(msg.id)])
                            await update_party_message(msg.id)
                            await poll_msg.delete()
                        else:
                            await channel.send("‚ùå –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ªüõå.")
                            await poll_msg.delete()
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        for guild in bot.guilds:
            monitored_channels = get_guild_setting(guild.id, "monitored_channels", [])
            for channel_id in monitored_channels:
                channel = guild.get_channel(channel_id)
                if not channel:
                    continue
                for session_id, session in ALL_SESSIONS.items():
                    if session["channel_id"] != channel_id or session.get("stopped"):
                        continue
                    
                    empty_roles = [r for r in session["party_roles"] if not r.get("user_id")]
                    filled_roles = [r for r in session["party_roles"] if r.get("user_id")]
                    
                    try:
                        msg = await channel.fetch_message(session["main_msg_id"])
                        event_age = (datetime.now(msg.created_at.tzinfo) - msg.created_at).total_seconds()
                        
                        # –õ–æ–≥–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç (900 —Å–µ–∫—É–Ω–¥)
                        # –ù–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∞–≤—à–∏–µ—Å—è, –Ω–æ –Ω–µ –≤—Å–µ —Ä–æ–ª–∏ –∑–∞–Ω—è—Ç—ã
                        reminders_enabled = get_guild_setting(guild.id, "reminders_enabled", True)
                        if reminders_enabled and filled_roles and empty_roles and event_age > 900:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 15 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                            last_reminder = session.get("last_reminder_time", 0)
                            time_since_reminder = event_age - last_reminder
                            
                            if time_since_reminder >= 900:  # 15 –º–∏–Ω—É—Ç = 900 —Å–µ–∫—É–Ω–¥
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–≤—à–∏–º—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                                mentions = [f"<@{role['user_id']}>" for role in filled_roles]
                                empty_role_names = [role['name'] for role in empty_roles]
                                
                                reminder_text = (
                                    f"üì¢ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏–≤–µ–Ω—Ç–µ:** {session['title']}\n"
                                    f"@everyone\n"
                                    f"–°–≤–æ–±–æ–¥–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(empty_role_names)}\n"
                                    f"–ó–ê–ü–û–õ–ù–ò–¢–ï –†–û–õ–ò –ß–¢–û–ë–´ –ö–û–ù–¢–ï–ù–¢ –°–û–°–¢–û–Ø–õ–°–Ø üéÆ"
                                )
                                
                                await channel.send(
                                    reminder_text,
                                    allowed_mentions=discord.AllowedMentions(users=True)
                                )
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                                session["last_reminder_time"] = event_age
                                ALL_SESSIONS[session_id] = session
                                save_all_data()
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ –∏ –µ—Å—Ç—å –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏
                        elif event_age > 3600 and empty_roles:
                            session["stopped"] = True
                            ALL_SESSIONS[session_id] = session
                            save_all_data()
                            save_event(int(session_id), session)
                            await update_party_message(int(session_id))
                            await channel.send(f"üî¥ –°–±–æ—Ä **{session['title']}** –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                            
                    except discord.NotFound:
                        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (404) - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∏–≤–µ–Ω—Ç
                        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞ {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                        session["stopped"] = True
                        ALL_SESSIONS[session_id] = session
                        save_all_data()
                        save_event(int(session_id), session)
                        try:
                            await channel.send(f"üî¥ –ò–≤–µ–Ω—Ç **{session['title']}** –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ).")
                        except Exception:
                            pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏–≤–µ–Ω—Ç–∞: {e}")
                        continue

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞
async def cleanup_channels():
    await bot.wait_until_ready()
    while not bot.is_closed():
        now = datetime.now(timezone.utc)
        for guild in bot.guilds:
            guild_id = str(guild.id)
            hour, minute = get_guild_setting(guild.id, "cleanup_time", [0, 0])
            cleanup_enabled = get_guild_setting(guild.id, "cleanup_enabled", True)
            if not cleanup_enabled:
                continue
            if now.hour == hour and now.minute == minute:
                cleanup_channel_id = get_guild_setting(guild.id, "cleanup_channels")
                if cleanup_channel_id:
                    channel = guild.get_channel(cleanup_channel_id)
                    if channel:
                        try:
                            messages = [msg async for msg in channel.history(limit=100)]
                            if len(messages) > 1:
                                await channel.delete_messages(messages[1:])
                                await channel.send("üßπ –ö–∞–Ω–∞–ª –æ—á–∏—â–µ–Ω, –Ω–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
        await asyncio.sleep(60)

async def check_internet_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ DNS Google
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(("8.8.8.8", 53))
        sock.close()
        return result == 0
    except Exception:
        return False

async def check_discord_api():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Discord API"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://discord.com/api/v10/gateway", timeout=5) as response:
                return response.status == 200
    except Exception:
        return False

async def connection_monitor():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    await bot.wait_until_ready()
    print("üîç –ú–æ–Ω–∏—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    connection_lost_time = None
    last_check_time = datetime.now()
    
    while not bot.is_closed():
        try:
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            internet_ok = await check_internet_connection()
            discord_api_ok = await check_discord_api()
            
            if not internet_ok or not discord_api_ok:
                if connection_lost_time is None:
                    connection_lost_time = current_time
                    print(f"‚ö†Ô∏è  –ü–æ—Ç–µ—Ä—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤ {current_time.strftime('%H:%M:%S')}")
                    print(f"   –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: {'‚úÖ' if internet_ok else '‚ùå'}")
                    print(f"   Discord API: {'‚úÖ' if discord_api_ok else '‚ùå'}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                lost_duration = (current_time - connection_lost_time).total_seconds()
                if lost_duration > 60:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
                    minutes = int(lost_duration // 60)
                    seconds = int(lost_duration % 60)
                    print(f"üî¥ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–∂–µ {minutes}–º {seconds}—Å")
                
                # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                if bot.is_closed() or not discord_api_ok:
                    print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discord...")
                    try:
                        if not bot.is_closed():
                            await bot.close()
                        await asyncio.sleep(5)
                        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç—Ç–æ —Å–ª–æ–∂–Ω–æ
                        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
            
            else:
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                if connection_lost_time is not None:
                    lost_duration = (current_time - connection_lost_time).total_seconds()
                    minutes = int(lost_duration // 60)
                    seconds = int(lost_duration % 60)
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ {minutes}–º {seconds}—Å")
                    connection_lost_time = None
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ
                if (current_time - last_check_time).total_seconds() >= 600:  # 10 –º–∏–Ω—É—Ç
                    guilds_count = len(bot.guilds)
                    users_count = len(set(bot.get_all_members()))
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {guilds_count} —Å–µ—Ä–≤–µ—Ä–æ–≤, {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π | {current_time.strftime('%H:%M:%S')}")
                    last_check_time = current_time
            
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            await asyncio.sleep(30)

@bot.event
async def on_disconnect():
    print(f"‚ö†Ô∏è  –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤ {datetime.now().strftime('%H:%M:%S')}")

@bot.event
async def on_resumed():
    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Discord –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ {datetime.now().strftime('%H:%M:%S')}")
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    # –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Å–ø–∞–º, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏

@bot.event 
async def on_guild_join(guild):
    print(f"‚ûï –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id}) - {guild.member_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await send_setup_message(guild, force=True)

@bot.event
async def on_guild_remove(guild):
    print(f"‚ûñ –ë–æ—Ç —É–¥–∞–ª–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞: {guild.name} (ID: {guild.id})")

async def process_command_queue():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    await bot.wait_until_ready()
    print("‚ö° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    queue_file = 'command_queue.json'
    
    while not bot.is_closed():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –æ—á–µ—Ä–µ–¥–∏
            if not os.path.exists(queue_file):
                await asyncio.sleep(5)
                continue
            
            # –ß–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            try:
                with open(queue_file, 'r', encoding='utf-8') as f:
                    commands = json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                await asyncio.sleep(5)
                continue
            
            if not commands:
                await asyncio.sleep(5)
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            processed_commands = []
            
            for command in commands:
                try:
                    if command['type'] == 'create_event':
                        result = await process_create_event_command(command)
                        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {result}")
                    else:
                        print(f"‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: {command['type']}")
                    
                    processed_commands.append(command)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command.get('type', 'unknown')}: {e}")
                    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                    processed_commands.append(command)
            
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            remaining_commands = [cmd for cmd in commands if cmd not in processed_commands]
            
            if remaining_commands != commands:
                with open(queue_file, 'w', encoding='utf-8') as f:
                    json.dump(remaining_commands, f, ensure_ascii=False, indent=2)
            
            await asyncio.sleep(2)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥: {e}")
            await asyncio.sleep(10)

async def process_create_event_command(command):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        guild_id = command['guild_id']
        channel_id = command['channel_id']
        title = command['title']
        description = command['description']
        time_str = command['time']
        roles = command['roles']
        creator_id = command['creator_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–∏–ª—å–¥–∏—é –∏ –∫–∞–Ω–∞–ª
        guild = bot.get_guild(guild_id)
        if not guild:
            return f"–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        channel = guild.get_channel(channel_id)
        if not channel:
            return f"–û—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}"
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏–Ω–≥–∞
        ping_val = get_guild_setting(guild_id, "ping_role", "everyone")
        if ping_val == "everyone":
            ping_text = "@everyone"
            allowed_mentions = discord.AllowedMentions(everyone=True)
        else:
            role = guild.get_role(int(ping_val))
            ping_text = role.mention if role and role.mentionable else "@everyone"
            allowed_mentions = discord.AllowedMentions(everyone=True) if ping_text == "@everyone" else discord.AllowedMentions(roles=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"{ping_text}\n"
            f"**{title}**\n"
            f"{description}\n\n"
        )
        
        if time_str:
            text += f"**–í—Ä–µ–º—è:** {time_str}\n\n"
        
        text += "**–†–æ–ª–∏:**\n" + "\n".join([f"{i+1}. {r} ‚Äî –°–≤–æ–±–æ–¥–Ω–æ" for i, r in enumerate(roles)])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await channel.send(text, allowed_mentions=allowed_mentions)
        thread = await msg.create_thread(name=title)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        ALL_SESSIONS[str(msg.id)] = {
            "guild_id": guild_id,
            "channel_id": channel_id,
            "main_msg_id": msg.id,
            "thread_id": thread.id,
            "title": title,
            "description": description,
            "time": time_str,
            "party_roles": [{"name": r, "user_id": None} for r in roles],
            "creator_id": creator_id,
            "stopped": False,
            "last_reminder_time": 0
        }
        save_all_data()
        save_event(msg.id, ALL_SESSIONS[str(msg.id)])
        await update_party_message(msg.id)
        
        return f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ '{title}' –≤ –∫–∞–Ω–∞–ª–µ #{channel.name}"
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {str(e)}"

async def update_bot_stats():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    await bot.wait_until_ready()
    print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
    
    while not bot.is_closed():
        try:
            total_members = 0
            online_members = 0
            guilds_count = len(bot.guilds)
            active_events = len([s for s in ALL_SESSIONS.values() if not s.get('stopped', False)])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for guild in bot.guilds:
                total_members += guild.member_count or 0
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–Ω–ª–∞–π–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤)
                if guild.member_count and guild.member_count < 1000:
                    try:
                        online_count = len([m for m in guild.members if m.status != discord.Status.offline])
                        online_members += online_count
                    except:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        pass
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                'guilds_count': guilds_count,
                'total_members': total_members,
                'online_members': online_members,
                'active_events': active_events,
                'last_updated': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                with open('bot_stats.json', 'w', encoding='utf-8') as f:
                    json.dump(stats, f, ensure_ascii=False, indent=2)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥—ë–º –º–µ–Ω—å—à–µ

@bot.event
async def on_error(event, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    import traceback
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ {event}: {traceback.format_exc()}")

@bot.event
@bot.event
async def on_command_error(ctx, error):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
    if isinstance(error, commands.CommandNotFound):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    elif isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    elif isinstance(error, commands.BotMissingPermissions):
        await ctx.send("‚ùå –£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã {ctx.command}: {error}")
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
async def start_bot_with_reconnect():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    retry_count = 0
    max_retries = 5
    
    while retry_count < max_retries:
        try:
            print("=" * 60)
            print(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{retry_count + 1}")
            print("=" * 60)
            
            await bot.start(BOT_TOKEN)
            
        except discord.LoginFailure:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ config.json –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            break
            
        except discord.HTTPException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e}")
            if e.status == 429:  # Rate limit
                print("‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º...")
                await asyncio.sleep(60)
            retry_count += 1
            
        except discord.ConnectionClosed as e:
            print(f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
            retry_count += 1
            
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            retry_count += 1
        
        if retry_count < max_retries:
            wait_time = min(2 ** retry_count, 60)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(wait_time)
        else:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            break

def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        from web import app
        app.run(host='localhost', port=8082, debug=False, use_reloader=False, threaded=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")

def start_both():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º...")
    print("=" * 60)
    print("üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    print("  ü§ñ Discord –±–æ—Ç")
    print("  üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (http://localhost:8082)")
    print("  üåç –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: https://8bf681c15819.ngrok-free.app")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=start_web_server, daemon=True)
    web_thread.start()
    
    # –î–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(2)
    print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(start_bot_with_reconnect())
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        print("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("üèÅ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == "--bot-only":
        # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
        print("üéØ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞–º–∏")
        print(f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        
        try:
            asyncio.run(start_bot_with_reconnect())
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
            print("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            import traceback
            traceback.print_exc()
        finally:
            print("üèÅ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ + –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        start_both()