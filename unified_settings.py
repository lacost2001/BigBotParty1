# -*- coding: utf-8 -*-
"""
–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Bigbot
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç party –∏ recruit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–¥–∏–Ω JSON —Ñ–∞–π–ª
"""

import json
import os
import asyncio
from typing import Dict, Any, Optional

# –ü—É—Ç—å –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–∞–π–ª—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
UNIFIED_SETTINGS_FILE = os.path.join(SCRIPT_DIR, "unified_settings.json")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –≥–∏–ª—å–¥–∏–∏
DEFAULT_GUILD_SETTINGS = {
    # Party Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "party": {
        "event_creator_role": None,
        "moderator_role": None,
        "ping_role": "everyone",
        "monitored_channels": [],
        "monitoring_enabled": True,
        "cleanup_enabled": True,
        "reminders_enabled": False,
        "monitoring_time": [10, 20],
        "cleanup_time": [0, 0],
        "reminder_time": [0, 15],
        "cleanup_channels": None,
        "event_creator_roles": []  # –ü–æ–ª–µ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    },
    # Recruit Bot –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    "recruit": {
        "admin_role": None,
        "moderator_role": None,
        "points_moderator_roles": "",
        "recruiter_roles": "",
        "events_channel": None,
        "shop_channel": None,
        "events_data": None,
        "points_start_date": "",
        "points_end_date": "",
        "default_role": None,
        "recruit_role": None,
        "guild_name": "",
        "cooldown_hours": 1,
        # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
        "forum_channel": None,  # –ö–∞–Ω–∞–ª-—Ñ–æ—Ä—É–º –¥–ª—è –∑–∞—è–≤–æ–∫ –≤ –≥–∏–ª—å–¥–∏—é
        "points_panel_channel": None,  # –ö–∞–Ω–∞–ª –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—á–∫–∏
    "recruit_panel_channel": None,  # –ö–∞–Ω–∞–ª –¥–ª—è –ø–∞–Ω–µ–ª–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –≤ –≥–∏–ª—å–¥–∏—é
    # –°–ª—É–∂–µ–±–Ω—ã–µ —Ñ–ª–∞–≥–∏
    "onboarding_sent": False  # –û—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–µ–±
    }
}

class UnifiedSettings:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–¥–∏–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def __init__(self):
        self.settings = self._load_settings()
    
    def _load_settings(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(UNIFIED_SETTINGS_FILE):
            try:
                with open(UNIFIED_SETTINGS_FILE, "r", encoding="utf-8") as f:
                    return json.load(f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                return {"guilds": {}}
        else:
            return {"guilds": {}}
    
    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. SETTINGS –≤ –ø–∞–º—è—Ç–∏:", self.settings)
        try:
            with open(UNIFIED_SETTINGS_FILE, "r", encoding="utf-8") as f:
                disk_data = json.load(f)
            print("üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –¥–∏—Å–∫–∞:", disk_data)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            merged = self._deep_merge_dicts(disk_data, self.settings)
            print("üîÄ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", merged)
            
            with open(UNIFIED_SETTINGS_FILE, "w", encoding="utf-8") as f:
                json.dump(merged, f, indent=2, ensure_ascii=False)
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç—å
            self.settings = merged
            print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ø–∞–º—è—Ç—å")
            
        except FileNotFoundError:
            # –§–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            with open(UNIFIED_SETTINGS_FILE, "w", encoding="utf-8") as f:
                json.dump(self.settings, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def _deep_merge_dicts(self, base: dict, incoming: dict) -> dict:
        """–ì–ª—É–±–æ–∫–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π. –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ incoming –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç."""
        result = base.copy()
        for key, value in incoming.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = self._deep_merge_dicts(result[key], value)
            else:
                result[key] = value
        return result
    
    def get_guild_settings(self, guild_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ª—å–¥–∏–∏"""
        guild_id_str = str(guild_id)
        if "guilds" not in self.settings:
            self.settings["guilds"] = {}
        
        if guild_id_str not in self.settings["guilds"]:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.settings["guilds"][guild_id_str] = {
                "party": DEFAULT_GUILD_SETTINGS["party"].copy(),
                "recruit": DEFAULT_GUILD_SETTINGS["recruit"].copy()
            }
            self._save_settings()
        
        return self.settings["guilds"][guild_id_str]
    
    def get_party_settings(self, guild_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ party –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        guild_settings = self.get_guild_settings(guild_id)
        return guild_settings.get("party", DEFAULT_GUILD_SETTINGS["party"].copy())
    
    def get_recruit_settings(self, guild_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ recruit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        guild_settings = self.get_guild_settings(guild_id)
        return guild_settings.get("recruit", DEFAULT_GUILD_SETTINGS["recruit"].copy())
    
    def set_party_setting(self, guild_id: int, key: str, value: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å party –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        guild_settings = self.get_guild_settings(guild_id)
        if "party" not in guild_settings:
            guild_settings["party"] = DEFAULT_GUILD_SETTINGS["party"].copy()
        
        guild_settings["party"][key] = value
        self._save_settings()
    
    def set_recruit_setting(self, guild_id: int, key: str, value: Any):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å recruit –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
        guild_settings = self.get_guild_settings(guild_id)
        if "recruit" not in guild_settings:
            guild_settings["recruit"] = DEFAULT_GUILD_SETTINGS["recruit"].copy()
        
        guild_settings["recruit"][key] = value
        self._save_settings()
    
    def update_party_settings(self, guild_id: int, updates: Dict[str, Any]):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ party –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        guild_settings = self.get_guild_settings(guild_id)
        if "party" not in guild_settings:
            guild_settings["party"] = DEFAULT_GUILD_SETTINGS["party"].copy()
        
        guild_settings["party"].update(updates)
        self._save_settings()
    
    def update_recruit_settings(self, guild_id: int, updates: Dict[str, Any]):
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ recruit –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        guild_settings = self.get_guild_settings(guild_id)
        if "recruit" not in guild_settings:
            guild_settings["recruit"] = DEFAULT_GUILD_SETTINGS["recruit"].copy()
        
        guild_settings["recruit"].update(updates)
        self._save_settings()
    
    def migrate_from_old_settings(self):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ settings.json (party)
        old_settings_file = os.path.join(SCRIPT_DIR, "settings.json")
        if os.path.exists(old_settings_file):
            try:
                with open(old_settings_file, "r", encoding="utf-8") as f:
                    old_settings = json.load(f)
                
                if "guilds" in old_settings:
                    for guild_id, guild_data in old_settings["guilds"].items():
                        print(f"  üìã –ú–∏–≥—Ä–∏—Ä—É–µ–º party –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}")
                        
                        # –ö–æ–ø–∏—Ä—É–µ–º party –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                        party_settings = {}
                        for key in DEFAULT_GUILD_SETTINGS["party"].keys():
                            if key in guild_data:
                                party_settings[key] = guild_data[key]
                        
                        self.update_party_settings(int(guild_id), party_settings)
                
                print("  ‚úÖ Party –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ party –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ recruit DB
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EventDatabase –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            from recruit_bot.database import EventDatabase
            
            async def migrate_recruit():
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–∏–ª—å–¥–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                db_path = os.path.join(SCRIPT_DIR, "potatos_recruit.db")
                if os.path.exists(db_path):
                    import aiosqlite
                    async with aiosqlite.connect(db_path) as db:
                        cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='guild_config'")
                        table_exists = await cursor.fetchone()
                        
                        if table_exists:
                            cursor = await db.execute("SELECT guild_id FROM guild_config")
                            guild_ids = await cursor.fetchall()
                            
                            for (guild_id,) in guild_ids:
                                print(f"  üìã –ú–∏–≥—Ä–∏—Ä—É–µ–º recruit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}")
                                config = await EventDatabase.get_guild_config(guild_id)
                                if config:
                                    self.update_recruit_settings(guild_id, config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é recruit –Ω–∞—Å—Ç—Ä–æ–µ–∫
            try:
                asyncio.run(migrate_recruit())
                print("  ‚úÖ Recruit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ recruit –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                
        except ImportError:
            print("  ‚ö†Ô∏è –ú–æ–¥—É–ª—å recruit_bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é recruit –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def export_settings(self) -> Dict[str, Any]:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return self.settings.copy()
    
    def import_settings(self, imported_settings: Dict[str, Any]):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings = imported_settings
        self._save_settings()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
unified_settings = UnifiedSettings()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å party_bot
def get_guild_settings(guild_id: int) -> Dict[str, Any]:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å party_bot - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç party –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return unified_settings.get_party_settings(guild_id)

def set_guild_setting(guild_id: int, key: str, value: Any):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å party_bot - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç party –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    unified_settings.set_party_setting(guild_id, key, value)

def get_guild_setting(guild_id: int, key: str, default=None):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å party_bot - –ø–æ–ª—É—á–∞–µ—Ç party –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    party_settings = unified_settings.get_party_settings(guild_id)
    return party_settings.get(key, default)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è recruit_bot
def get_recruit_config(guild_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å recruit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    return unified_settings.get_recruit_settings(guild_id)

def update_recruit_config(guild_id: int, **kwargs) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å recruit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        unified_settings.update_recruit_settings(guild_id, kwargs)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è recruit –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False
