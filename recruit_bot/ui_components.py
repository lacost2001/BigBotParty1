"""
UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–±—ã—Ç–∏–π
"""

from datetime import datetime
import logging
import re
from typing import List, Optional

import aiosqlite
import discord
from discord import ui

from .database import EventDatabase
from .events import (
    SHOP_ITEMS,
    EventAction,
    EventManager,
    EventSubmission,
    EventType,
    ShopManager,
    get_multiplier_options,
)

logger = logging.getLogger("potatos_recruit.ui_components")

async def check_points_date_restrictions(guild_id: int) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞—á–∏—Å–ª—è—Ç—å –æ—á–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–∞—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–æ–∂–Ω–æ_–Ω–∞—á–∏—Å–ª—è—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ)
    """
    config = await EventDatabase.get_guild_config(guild_id)
    if not config:
        return True, ""
    
    start_date = config.get('points_start_date')
    end_date = config.get('points_end_date')
    
    # –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    if not start_date and not end_date:
        return True, ""
    
    today = datetime.now().strftime('%Y-%m-%d')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
    if start_date and today < start_date:
        return False, f"‚ùå –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ {start_date}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
    if end_date and today > end_date:
        return False, f"‚ùå –ü–µ—Ä–∏–æ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è {end_date}"
    
    return True, ""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∑–∞—è–≤–æ–∫
from .submission_state import active_submissions

class InteractiveSubmissionSession:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    
    def __init__(self, user_id: int, channel_id: int, event_type: EventType, action: EventAction):
        self.user_id = user_id
        self.channel_id = channel_id
        self.event_type = event_type
        self.action = action
        self.participants = [user_id]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É
        self.screenshot_url = None
        self.description = None
        self.state = "waiting_participants"  # waiting_participants -> waiting_screenshot -> completed
        self.last_message_id = None
        self.original_message_id = None  # ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å embed
        self.original_channel_id = None  # ID –∫–∞–Ω–∞–ª–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.temp_id = None  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è


def build_participants_embed(session: "InteractiveSubmissionSession") -> discord.Embed:
    """–°—Ç—Ä–æ–∏—Ç (–∏–ª–∏ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç) embed —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏.

    –õ–æ–≥–∏–∫–∞ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ –∏ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.
    """
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
    temp_submission = EventSubmission(
        event_type=session.event_type,
        action=session.action,
        participants=session.participants,
        submitter_id=session.user_id,
        group_size=len(session.participants)
    )

    participants_mentions = ", ".join(f"<@{uid}>" for uid in session.participants)
    if not participants_mentions:
        participants_mentions = "(–Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)"

    embed = discord.Embed(
        title="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∑–∞—è–≤–∫–∏",
        description="–£–ø–æ–º—è–Ω–∏—Ç–µ (@) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—Ä–µ–¥–µ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Ä–µ–∞–∫—Ü–∏—è ‚ûï).",
        color=discord.Color.orange()
    )
    embed.add_field(
        name="‚úÖ –¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏",
        value=participants_mentions,
        inline=False
    )
    embed.add_field(
        name="üéÆ –°–æ–±—ã—Ç–∏–µ",
        value=temp_submission.get_event_display_name(),
        inline=True
    )
    embed.add_field(
        name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏",
        value=EventManager.format_points_display(temp_submission.calculate_base_points()),
        inline=True
    )
    embed.set_footer(text="–î–æ–±–∞–≤—å—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º. –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω.")
    return embed

async def find_message_by_footer(guild: discord.Guild, footer_text: str) -> tuple[discord.Message, discord.TextChannel]:
    """–ò—â–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É –≤ footer embed"""
    try:
        logger.info(f"=== –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ footer: '{footer_text}' –≤ –≥–∏–ª—å–¥–∏–∏ {guild.name} ===")
        
        # –ò—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(guild.text_channels)} –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
        for channel in guild.text_channels:
            try:
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª: {channel.name}")
                async for message in channel.history(limit=100):
                    if message.embeds:
                        for embed in message.embeds:
                            if embed.footer and footer_text in str(embed.footer.text):
                                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ {channel.name} —Å footer: {embed.footer.text}")
                                return message, channel
            except discord.Forbidden:
                logger.debug(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel.name}")
                continue
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel.name}: {e}")
                continue
        
        # –ò—â–µ–º –≤ —Ç—Ä–µ–¥–∞—Ö
        logger.info("–ò—â–µ–º –≤ —Ç—Ä–µ–¥–∞—Ö...")
        for channel in guild.text_channels:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–¥—ã
            if channel.threads:
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(channel.threads)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤ –≤ {channel.name}")
                for thread in channel.threads:
                    try:
                        logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–¥: {thread.name}")
                        async for message in thread.history(limit=50):
                            if message.embeds:
                                for embed in message.embeds:
                                    if embed.footer and footer_text in str(embed.footer.text):
                                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥–µ {thread.name} —Å footer: {embed.footer.text}")
                                        return message, thread
                    except discord.Forbidden:
                        logger.debug(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–¥—É {thread.name}")
                        continue
                    except Exception:
                        continue
            
            # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–¥—ã
            try:
                archived_count = 0
                async for archived_thread in channel.archived_threads(limit=20):
                    archived_count += 1
                    try:
                        logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–µ–¥: {archived_thread.name}")
                        async for message in archived_thread.history(limit=50):
                            if message.embeds:
                                for embed in message.embeds:
                                    if embed.footer and footer_text in str(embed.footer.text):
                                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç—Ä–µ–¥–µ {archived_thread.name} —Å footer: {embed.footer.text}")
                                        return message, archived_thread
                    except discord.Forbidden:
                        logger.debug(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ç—Ä–µ–¥—É {archived_thread.name}")
                        continue
                    except Exception:
                        continue
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {archived_count} –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–æ–≤ –≤ {channel.name}")
            except Exception:
                continue
        
        logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å footer '{footer_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ find_message_by_footer: {e}")
        return None, None

async def update_original_event_message_by_submission_id(submission_id: int, guild: discord.Guild, new_status: str, color: discord.Color = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ submission_id"""
    try:
        logger.info(f"=== –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ {submission_id} ===")
        logger.info(f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}, Guild: {guild.name if guild else 'None'}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        submission_details = await EventDatabase.get_submission_details(submission_id)
        if not submission_details:
            logger.error(f"–ó–∞—è–≤–∫–∞ {submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        logger.info(f"–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏: {submission_details}")
        original_message_id = submission_details.get('original_message_id')
        original_channel_id = submission_details.get('original_channel_id')
        logger.info(f"original_message_id: {original_message_id}, original_channel_id: {original_channel_id}")
        
        message = None
        
        # –°–ø–æ—Å–æ–± 1: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID
        if original_message_id and original_channel_id:
            logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {original_channel_id}")
            channel = guild.get_channel(original_channel_id)
            if channel:
                logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel.name}")
                try:
                    message = await channel.fetch_message(original_message_id)
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID: {original_message_id}")
                except discord.NotFound:
                    logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {original_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID: {e}")
            else:
                logger.warning(f"–ö–∞–Ω–∞–ª {original_channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥–∏–ª—å–¥–∏–∏")
        
        # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ footer —Å ID –∑–∞—è–≤–∫–∏
        if not message:
            logger.info(f"–ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {submission_id} –ø–æ footer...")
            message, channel = await find_message_by_footer(guild, f"–ó–∞—è–≤–∫–∞ ID: {submission_id}")
            if message:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ footer —Å ID –∑–∞—è–≤–∫–∏: {submission_id}")
            else:
                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ footer '–ó–∞—è–≤–∫–∞ ID: {submission_id}'")
        
        # –°–ø–æ—Å–æ–± 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É ID (–µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è)
        if not message:
            logger.info("–ò—â–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Å–µ—Å—Å–∏—è–º...")
            logger.info(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏: {list(active_submissions.keys())}")
            for session_key, session in active_submissions.items():
                if hasattr(session, 'temp_id') and session.temp_id:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é —Å temp_id: {session.temp_id}")
                    temp_message, temp_channel = await find_message_by_footer(guild, session.temp_id)
                    if temp_message:
                        message = temp_message
                        channel = temp_channel
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É ID: {session.temp_id}")
                        break
        
        if not message:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞—è–≤–∫–∏ {submission_id}")
            return
        
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –û–±–Ω–æ–≤–ª—è–µ–º...")
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed
            embed = discord.Embed(
                title="üìù –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
                description=f"**–°–æ–±—ã—Ç–∏–µ**: {submission_details['event_type']} - {submission_details['action']}",
                color=color or discord.Color.orange()
            )
            
            submitter_id = submission_details['submitter_id']
            submitter = guild.get_member(submitter_id)
            submitter_mention = submitter.mention if submitter else f"<@{submitter_id}>"
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=submitter_mention, inline=True)
            embed.add_field(name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏", value=f"{EventManager.format_points_display(submission_details['base_points'])}", inline=True)
            embed.add_field(name="üîÑ –°—Ç–∞—Ç—É—Å", value=new_status, inline=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º footer —Å –Ω–∞—Å—Ç–æ—è—â–∏–º ID –∑–∞—è–≤–∫–∏
            embed.set_footer(text=f"–ó–∞—è–≤–∫–∞ ID: {submission_id}")
            
            await message.edit(embed=embed)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {submission_id} –Ω–∞: {new_status}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_original_event_message_by_submission_id: {e}")

async def update_original_event_message_with_id(session: InteractiveSubmissionSession, guild: discord.Guild, submission_id: int, new_status: str, color: discord.Color = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ ID –∑–∞—è–≤–∫–∏"""
    try:
        if not session.original_message_id or not session.original_channel_id:
            return
        
        channel = guild.get_channel(session.original_channel_id)
        if not channel:
            return
        
        try:
            message = await channel.fetch_message(session.original_message_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed
            embed = discord.Embed(
                title="üìù –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
                description=f"**–°–æ–±—ã—Ç–∏–µ**: {session.event_type.value} - {session.action.value}",
                color=color or discord.Color.orange()
            )
            
            submitter = guild.get_member(session.user_id)
            submitter_mention = submitter.mention if submitter else f"<@{session.user_id}>"
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π submission –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
            temp_submission = EventSubmission(
                event_type=session.event_type,
                action=session.action,
                participants=session.participants,
                submitter_id=session.user_id
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=submitter_mention, inline=True)
            embed.add_field(name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏", value=f"{EventManager.format_points_display(temp_submission.calculate_base_points())}", inline=True)
            embed.add_field(name="üîÑ –°—Ç–∞—Ç—É—Å", value=new_status, inline=True)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º footer —Å –Ω–∞—Å—Ç–æ—è—â–∏–º ID –∑–∞—è–≤–∫–∏
            embed.set_footer(text=f"–ó–∞—è–≤–∫–∞ ID: {submission_id}")
            
            await message.edit(embed=embed)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {submission_id} –Ω–∞: {new_status}")
            
        except discord.NotFound:
            logger.warning(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {session.original_message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_original_event_message_with_id: {e}")

async def update_original_event_message(session: InteractiveSubmissionSession, guild: discord.Guild, new_status: str, color: discord.Color = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º"""
    try:
        if not session.original_message_id or not session.original_channel_id:
            return
        
        channel = guild.get_channel(session.original_channel_id)
        if not channel:
            return
        
        try:
            message = await channel.fetch_message(session.original_message_id)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed
            embed = discord.Embed(
                title="üìù –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
                description=f"**–°–æ–±—ã—Ç–∏–µ**: {session.event_type.value} - {session.action.value}",
                color=color or discord.Color.orange()
            )
            
            submitter = guild.get_member(session.user_id)
            submitter_mention = submitter.mention if submitter else f"<@{session.user_id}>"
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π submission –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
            temp_submission = EventSubmission(
                event_type=session.event_type,
                action=session.action,
                participants=session.participants,
                submitter_id=session.user_id
            )
            
            embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=submitter_mention, inline=True)
            embed.add_field(name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏", value=f"{EventManager.format_points_display(temp_submission.calculate_base_points())}", inline=True)
            embed.add_field(name="üîÑ –°—Ç–∞—Ç—É—Å", value=new_status, inline=True)
            
            await message.edit(embed=embed)
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞: {new_status}")
            
        except discord.NotFound:
            logger.warning(f"–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {session.original_message_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ update_original_event_message: {e}")

async def handle_submission_message(message: discord.Message) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ."""
    session_key = f"{message.author.id}_{message.channel.id}"
    if active_submissions:
        logger.debug(
            f"[HANDLE ENTRY] incoming={session_key} total={len(active_submissions)} sample={list(active_submissions.keys())[:5]} dict_id={id(active_submissions)}"
        )
    else:
        logger.debug(f"[HANDLE ENTRY] no active_submissions; incoming={session_key}")

    session = active_submissions.get(session_key)

    # 1) Fallback: –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–¥ –∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∫–ª—é—á –ø–æ parent_id
    if not session and isinstance(message.channel, discord.Thread) and message.channel.parent_id:
        parent_key = f"{message.author.id}_{message.channel.parent_id}"
        parent_session = active_submissions.get(parent_key)
        if parent_session:
            try:
                parent_session.channel_id = message.channel.id
            except Exception:
                pass
            active_submissions[session_key] = parent_session
            del active_submissions[parent_key]
            session = parent_session
            logger.warning(f"[HANDLE FALLBACK] parent->thread {parent_key} -> {session_key}")

    # 2) –°–ø–∞—Å–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∏—â–µ–º —Å–µ—Å—Å–∏—é –ø–æ channel_id (–µ—Å–ª–∏ –∫–ª—é—á –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –¥—Ä—É–≥–∏–º user_id)
    if not session and isinstance(message.channel, discord.Thread):
        for k, s in list(active_submissions.items()):
            if getattr(s, 'channel_id', None) == message.channel.id:
                logger.warning(f"[HANDLE RESCUE] channel_id match k={k} -> rebind to author_key={session_key}")
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–ª—é—á –ø–æ–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Å—Å–∏–∏, –∞ –Ω–µ –ø–æ–¥ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                owner_key = f"{s.user_id}_{message.channel.id}"
                if k != owner_key:
                    active_submissions[owner_key] = s
                    try:
                        del active_submissions[k]
                    except KeyError:
                        pass
                # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º session_key, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ owner_key
                if message.author.id == getattr(s, 'user_id', None):
                    if owner_key != session_key:
                        active_submissions[session_key] = s
                    session = s
                else:
                    session = s
                break
        if not session:
            logger.debug(f"[HANDLE RESCUE] No session found by channel scan for thread={message.channel.id}")

    if not session:
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        lowered = message.content.lower()
        has_mentions = bool(message.mentions)
        has_keywords = any(tok in lowered for tok in ["—Ç–æ–ª—å–∫–æ —è", "@", "—É—á–∞—Å—Ç", "–æ–¥–∏–Ω"])
        
        if has_mentions or has_keywords:
            logger.warning(f"[HANDLE NO SESSION] –ù–µ—Ç —Å–µ—Å—Å–∏–∏ –¥–ª—è {session_key}, –Ω–æ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è/–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞")
            logger.warning(f"[HANDLE NO SESSION] active_submissions keys: {list(active_submissions.keys())}")
            logger.warning(f"[HANDLE NO SESSION] content='{message.content[:60]}'")
            logger.warning(f"[HANDLE NO SESSION] mentions={[m.id for m in message.mentions]}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_sessions = [k for k in active_submissions.keys() if k.startswith(f"{message.author.id}_")]
            if user_sessions:
                logger.warning(f"[HANDLE NO SESSION] –ù–∞–π–¥–µ–Ω—ã —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_sessions}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
                fallback_session = active_submissions[user_sessions[0]]
                logger.warning(f"[HANDLE FALLBACK SESSION] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é {user_sessions[0]} —Å–æ—Å—Ç–æ—è–Ω–∏–µ={fallback_session.state}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–¥ –∏ —Å–µ—Å—Å–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if isinstance(message.channel, discord.Thread) and fallback_session.state == "waiting_participants":
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª —Å–µ—Å—Å–∏–∏
                    fallback_session.channel_id = message.channel.id
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
                    active_submissions[session_key] = fallback_session
                    del active_submissions[user_sessions[0]]
                    session = fallback_session
                    logger.warning(f"[HANDLE FALLBACK SUCCESS] –°–µ—Å—Å–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –Ω–∞ {session_key}")
        
        if not session:
            return False
    
    # –î–æ–ø. –ª–æ–≥ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
    lowered = message.content.lower()
    if any(tok in lowered for tok in ["—Ç–æ–ª—å–∫–æ —è", "@", "—É—á–∞—Å—Ç", "–æ–¥–∏–Ω"]):
        logger.debug(f"[HANDLE SESSION] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {session_key} state={session.state}")

    # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Å—Å–∏–∏ –∏ –∞–≤—Ç–æ—Ä –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if session.user_id != message.author.id:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if any(tok in lowered for tok in ["—Ç–æ–ª—å–∫–æ —è", "@", "—É—á–∞—Å—Ç", "–æ–¥–∏–Ω"]):
            logger.debug(f"[HANDLE SKIP] –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è {message.author.id} != session.user_id {session.user_id}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
    if message.content.lower().strip() in ["–æ—Ç–ø—Ä–∞–≤–∏—Ç—å", "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "send", "submit"]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å —É–∂–µ –∏–º–µ—é—â–∏–º—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ
        await complete_submission(message, session, session.screenshot_url)
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        if session_key in active_submissions:
            del active_submissions[session_key]
        
        return True
    
    if session.state == "waiting_participants":
        return await handle_participants_message(message, session)
    elif session.state == "ready_to_submit":
        # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ)
        return False
    elif session.state == "waiting_screenshot":
        return await handle_screenshot_message(message, session)
    
    # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∞—á–µ, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –ø–∏—à–µ—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return False

async def handle_participants_message(message: discord.Message, session: InteractiveSubmissionSession) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
    logger.info(f"[PARTICIPANTS START] key={session.user_id}_{session.channel_id} msg_author={message.author.id} content='{message.content[:80]}' state={session.state}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
    has_mentions = bool(message.mentions)
    has_keywords = any(word in message.content.lower() for word in ['—Ç–æ–ª—å–∫–æ —è', '—É—á–∞—Å—Ç–Ω–∏–∫', '–æ–¥–∏–Ω'])
    
    logger.info(f"[PARTICIPANTS CHECK] has_mentions={has_mentions} has_keywords={has_keywords} mentions_count={len(message.mentions)}")
    
    if not has_mentions and not has_keywords:
        logger.info(f"[PARTICIPANTS SKIP] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        return False  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        
    try:
        participants = parse_participants_from_message(message)
    except Exception as e:
        logger.error(f"[PARTICIPANTS ERROR] parse failed: {e}")
        await message.channel.send("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ª–æ–≥ –∑–∞–ø–∏—Å–∞–Ω)")
        return True
    logger.info(f"[PARTICIPANTS PARSED] count={len(participants)} ids={[p.id for p in participants]}")
    
    if not participants:
        embed = discord.Embed(
            title="‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            description="–£–ø–æ–º—è–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ @ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Ç–æ–ª—å–∫–æ —è' –µ—Å–ª–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –æ–¥–∏–Ω",
            color=discord.Color.red()
        )
        await message.channel.send(embed=embed)
        return True
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã)
    for participant in participants:
        if participant.id not in session.participants:
            session.participants.append(participant.id)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –±–æ–ª—å—à–µ –Ω–µ –∂–¥–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    session.state = "ready_to_submit"
    
    # –°–æ–∑–¥–∞–µ–º embed —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    embed = discord.Embed(
        title="‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
        description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–¥–∞—á—É",
        color=discord.Color.green()
    )
    
    participants_list = []
    for user_id in session.participants:
        user = message.guild.get_member(user_id)
        if user:
            participants_list.append(user.mention)
    
    embed.add_field(
        name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
        value='\n'.join(participants_list),
        inline=False
    )
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π submission –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    submission = EventSubmission(
        event_type=session.event_type,
        action=session.action,
        participants=session.participants,
        submitter_id=session.user_id
    )
    
    embed.add_field(
        name="üéÆ –°–æ–±—ã—Ç–∏–µ",
        value=submission.get_event_display_name(),
        inline=True
    )
    
    embed.add_field(
        name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏",
        value=f"{EventManager.format_points_display(submission.calculate_base_points())}",
        inline=True
    )
    
    embed.set_footer(text="üí° –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º View —Å –∫–Ω–æ–ø–∫–∞–º–∏
    view = SubmissionConfirmView(session)
    
    try:
        await message.channel.send(embed=embed, view=view)
        logger.debug(f"[PARTICIPANTS SENT] session={session.user_id}_{session.channel_id} participants={len(session.participants)}")
    except Exception as e:
        logger.error(f"[PARTICIPANTS ERROR] send embed failed: {e}")
        await message.channel.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å embed —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")
    return True

async def handle_screenshot_message(message: discord.Message, session: InteractiveSubmissionSession) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º"""
    screenshot_url = None
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if message.attachments:
        attachment = message.attachments[0]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if any(attachment.filename.lower().endswith(ext) for ext in ['.png', '.jpg', '.jpeg', '.gif', '.webp']):
            screenshot_url = attachment.url
            session.screenshot_url = screenshot_url  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            confirm_view = SubmissionConfirmView(session)
            
            embed = discord.Embed(
                title="üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
                description=f"**–§–∞–π–ª:** {attachment.filename}\n\n"
                           f"**–°–æ–±—ã—Ç–∏–µ:** {session.event_type.value} - {session.action.value}\n"
                           f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(session.participants)}\n\n"
                           "üöÄ **–ì–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?**",
                color=discord.Color.blue()
            )
            embed.set_image(url=screenshot_url)
            
            await message.reply(embed=embed, view=confirm_view)
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.content:
        import re
        urls = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', message.content)
        if urls:
            screenshot_url = urls[0]
            session.screenshot_url = screenshot_url  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            confirm_view = SubmissionConfirmView(session)
            
            embed = discord.Embed(
                title="üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω",
                description=f"**–°—Å—ã–ª–∫–∞:** {screenshot_url}\n\n"
                           f"**–°–æ–±—ã—Ç–∏–µ:** {session.event_type.value} - {session.action.value}\n"
                           f"**–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {len(session.participants)}\n\n"
                           "üöÄ **–ì–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?**",
                color=discord.Color.blue()
            )
            embed.set_image(url=screenshot_url)
            
            await message.reply(embed=embed, view=confirm_view)
            return True
        else:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.reply(
                "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!** –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                "üí° *–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:*\n"
                "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º\n"
                "‚Ä¢ –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
                "üìù *–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ:* **–æ—Ç–ø—Ä–∞–≤–∏—Ç—å**"
            )
            return True
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.reply(
            "‚úÖ **–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!** –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            "üìù *–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:* **–æ—Ç–ø—Ä–∞–≤–∏—Ç—å**"
        )
        return True

async def complete_submission(context, session: InteractiveSubmissionSession, screenshot_url: str = None):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    
    Args:
        context: discord.Message –∏–ª–∏ discord.Interaction
        session: –°–µ—Å—Å–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–∞—á–∏
        screenshot_url: URL —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º guild –∏ channel –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if isinstance(context, discord.Interaction):
        guild = context.guild
        channel = context.channel
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: thread_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏, –∞ –Ω–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        thread_id = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:  # discord.Message
        guild = context.guild
        channel = context.channel
        thread_id = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
    submission = EventSubmission(
        event_type=session.event_type,
        action=session.action,
        participants=session.participants,
        submitter_id=session.user_id,
        group_size=len(session.participants),
        description=f"–°–æ–±—ã—Ç–∏–µ: {session.event_type.value} - {session.action.value}",
        screenshot_url=screenshot_url
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    submission_id = await EventDatabase.create_event_submission(
        guild_id=guild.id,
        submission=submission,
        original_message_id=session.original_message_id,
        original_channel_id=session.original_channel_id
    )
    
    if not submission_id:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            color=discord.Color.red()
        )
        await channel.send(embed=embed)
        return
    
    # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –∑–∞—è–≤–∫–∏
    embed = discord.Embed(
        title="üìã –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
        description=f"**–°–æ–±—ã—Ç–∏–µ**: {submission.get_event_display_name()}",
        color=discord.Color.orange()
    )
    
    embed.add_field(name="üÜî ID –∑–∞—è–≤–∫–∏", value=str(submission_id), inline=True)
    embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=f"<@{session.user_id}>", inline=True)
    embed.add_field(name="ÔøΩ –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏", value=f"{EventManager.format_points_display(submission.calculate_base_points())}", inline=True)
    embed.add_field(name="ÔøΩüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(len(session.participants)), inline=True)
    embed.add_field(name="üîÑ –°—Ç–∞—Ç—É—Å", value="‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", inline=True)
    embed.add_field(name="üìÖ –°–æ–∑–¥–∞–Ω–∞", value=f"<t:{int(__import__('time').time())}:R>", inline=True)
    
    participants_list = []
    for user_id in session.participants:
        user = guild.get_member(user_id)
        if user:
            participants_list.append(user.mention)
    
    embed.add_field(
        name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
        value='\n'.join(participants_list),
        inline=False
    )
    
    if screenshot_url:
        embed.add_field(name="üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç", value=f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({screenshot_url})", inline=False)
        embed.set_image(url=screenshot_url)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–Ω–≥–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    guild_config = await EventDatabase.get_guild_config(guild.id)
    moderator_role = guild_config.get('moderator_role')
    admin_role = guild_config.get('admin_role')
    
    ping_text = ""
    if moderator_role:
        try:
            role = guild.get_role(int(moderator_role))
            if role:
                ping_text += f"{role.mention} "
        except:
            pass
    
    if admin_role:
        try:
            role = guild.get_role(int(admin_role))
            if role:
                ping_text += f"{role.mention} "
        except:
            pass
    
    content = f"{ping_text}\nüîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!**" if ping_text else "üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ!**"
    
    # –°–æ–∑–¥–∞–µ–º view –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    moderator_view = EventModerationView(submission_id, submission)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await channel.send(content=content, embed=embed, view=moderator_view)
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –∫–∞–∫ ID —Ç—Ä–µ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(channel, discord.Thread):
        thread_id = channel.id
    else:
        thread_id = None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ thread_id
    async with aiosqlite.connect("potatos_recruit.db") as db:
        await db.execute("""
            UPDATE event_submissions SET message_id = ?, thread_id = ? WHERE id = ?
        """, (sent_message.id, thread_id, submission_id))
        await db.commit()
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã IDs: message_id={sent_message.id}, thread_id={thread_id} –¥–ª—è –∑–∞—è–≤–∫–∏ {submission_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_original_event_message_with_id(
        session, 
        guild, 
        submission_id,
        "‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", 
        discord.Color.orange()
    )

def parse_participants_from_message(message: discord.Message) -> List[discord.Member]:
    """–ü–∞—Ä—Å–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    participants = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "—Ç–æ–ª—å–∫–æ —è"
    if "—Ç–æ–ª—å–∫–æ —è" in message.content.lower():
        return [message.author]
    
    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for mention in message.mentions:
        if mention not in participants and not mention.bot:
            participants.append(mention)
    
    # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if message.author not in participants:
        participants.append(message.author)
    
    return participants

class EventSelectMenu(ui.Select):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è"""
    
    def __init__(self):
        options = []
        event_options = EventManager.get_event_options()
        
        for value, label, description in event_options[:25]:  # Discord –ª–∏–º–∏—Ç 25 –æ–ø—Ü–∏–π
            options.append(discord.SelectOption(
                label=label,
                value=value,
                description=description
            ))
        
        super().__init__(
            placeholder="üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è...",
            min_values=1,
            max_values=1,
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        # –°—Ä–∞–∑—É –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è
        await interaction.response.defer(ephemeral=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
        can_create, error_message = await check_points_date_restrictions(interaction.guild.id)
        if not can_create:
            await interaction.followup.send(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!\n{error_message}", ephemeral=True)
            return
        
        selected_value = self.values[0]
        
        try:
            event_type, action = EventManager.parse_event_selection(selected_value)
        except ValueError as e:
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è: {e}", ephemeral=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        submission = EventSubmission(
            event_type=event_type,
            action=action,
            participants=[interaction.user.id],
            submitter_id=interaction.user.id
        )
        
        # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –¥–ª—è –∑–∞—è–≤–∫–∏
        thread_name = f"{submission.get_event_display_name()} - {interaction.user.display_name}"
        
        embed = discord.Embed(
            title="üìù –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
            description=f"**–°–æ–±—ã—Ç–∏–µ**: {submission.get_event_display_name()}",
            color=discord.Color.blue()
        )
        
        embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
        embed.add_field(name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏", value=f"{EventManager.format_points_display(submission.calculate_base_points())}", inline=True)
        embed.add_field(name="üîÑ –°—Ç–∞—Ç—É—Å", value="‚è≥ –û–∂–∏–¥–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", inline=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        import time
        temp_id = f"temp_{int(time.time())}_{interaction.user.id}"
        embed.set_footer(text=f"–ó–∞—è–≤–∫–∞ ID: {temp_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
            events_channel_id = await EventDatabase.get_events_channel(interaction.guild.id)
            target_channel = interaction.channel  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
            
            if events_channel_id:
                events_channel = interaction.guild.get_channel(events_channel_id)
                if events_channel:
                    target_channel = events_channel
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –≤ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
            message = await target_channel.send(embed=embed)
            thread = await message.create_thread(name=thread_name[:100])
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            session = InteractiveSubmissionSession(
                user_id=interaction.user.id,
                channel_id=thread.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Ç—Ä–µ–¥–∞ –≤–º–µ—Å—Ç–æ –∫–∞–Ω–∞–ª–∞
                event_type=event_type,
                action=action
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            session.original_message_id = message.id
            session.original_channel_id = target_channel.id
            session.temp_id = temp_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            session_key = f"{interaction.user.id}_{thread.id}"
            active_submissions[session_key] = session
            logger.info(f"[SESSION CREATE] key={session_key} event={event_type.value}/{action.value} thread_id={thread.id} active_total={len(active_submissions)} id(active_submissions)={id(active_submissions)}")
            logger.info(f"[SESSION CREATE] –í—Å–µ –∫–ª—é—á–∏ —Å–µ—Å—Å–∏–π: {list(active_submissions.keys())}")
            
            # –†–∞–±–æ—á–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (state –æ—Å—Ç–∞—ë—Ç—Å—è waiting_participants)
            session.state = "waiting_participants"
            participants_embed = discord.Embed(
                title="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è",
                description="–ü–∏–Ω–≥—É–π—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
                color=discord.Color.orange()
            )
            participants_embed.add_field(
                name="üîß –ö–∞–∫ —É–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
                value="‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ `@user1 @user2 @user3` —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ `—Ç–æ–ª—å–∫–æ —è` –µ—Å–ª–∏ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –æ–¥–∏–Ω",
                inline=False
            )
            participants_embed.set_footer(text="üí° –ü–∏–Ω–≥–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å (—É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)")
            await thread.send(f"{interaction.user.mention}", embed=participants_embed)
            
            await interaction.followup.send(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥–µ: {thread.mention}", ephemeral=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞: {e}")
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}", ephemeral=True)

class SubmissionConfirmView(ui.View):
    """View —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    
    def __init__(self, session: InteractiveSubmissionSession):
        super().__init__(timeout=600)  # 10 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
        self.session = session
    
    @ui.button(label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.green)
    async def confirm_submission(self, interaction: discord.Interaction, button: ui.Button):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"""
        if interaction.user.id != self.session.user_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –µ—ë –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!",
                ephemeral=True
            )
            return
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for item in self.children:
            item.disabled = True
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        await complete_submission(interaction, self.session, screenshot_url=None)
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session_key = f"{self.session.user_id}_{self.session.channel_id}"
        if session_key in active_submissions:
            del active_submissions[session_key]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        embed = discord.Embed(
            title="‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
            description="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ",
            color=discord.Color.green()
        )
        
        await interaction.response.edit_message(embed=embed, view=self)
    
    @ui.button(label="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", style=discord.ButtonStyle.secondary)
    async def add_screenshot(self, interaction: discord.Interaction, button: ui.Button):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∫ –∑–∞—è–≤–∫–µ"""
        if interaction.user.id != self.session.user_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!",
                ephemeral=True
            )
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        self.session.state = "waiting_screenshot"
        
        embed = discord.Embed(
            title="üì∑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
            description="–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
            color=discord.Color.orange()
        )
        embed.add_field(
            name="üìù –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å:",
            value="‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–∞ imgur.com, prnt.sc –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å\n‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            inline=False
        )
        embed.set_footer(text="üí° –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        
        await interaction.response.send_message(embed=embed)
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def cancel_submission(self, interaction: discord.Interaction, button: ui.Button):
        """–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏"""
        if interaction.user.id != self.session.user_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –µ—ë –æ—Ç–º–µ–Ω–∏—Ç—å!",
                ephemeral=True
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session_key = f"{self.session.user_id}_{self.session.channel_id}"
        if session_key in active_submissions:
            del active_submissions[session_key]
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for item in self.children:
            item.disabled = True
        
        embed = discord.Embed(
            title="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            description="–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            color=discord.Color.red()
        )
        
        await interaction.response.edit_message(embed=embed, view=self)
    
    async def on_timeout(self):
        """–ö–æ–≥–¥–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"""
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session_key = f"{self.session.user_id}_{self.session.channel_id}"
        if session_key in active_submissions:
            del active_submissions[session_key]

class EventSubmissionModal(ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
    
    def __init__(self, event_type: EventType, action: EventAction):
        self.event_type = event_type
        self.action = action
        
        submission = EventSubmission(
            event_type=event_type,
            action=action,
            participants=[],
            submitter_id=0
        )
        
        title = f"–ó–∞—è–≤–∫–∞: {submission.get_event_display_name()}"
        super().__init__(title=title[:45])  # Discord –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
    
    participants_input = ui.TextInput(
        label="–£—á–∞—Å—Ç–Ω–∏–∫–∏",
        placeholder="@User1 @User2 @User3 (–ø–∏–Ω–≥—É–π—Ç–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)",
        style=discord.TextStyle.paragraph,
        max_length=1000,
        required=True
    )
    
    description_input = ui.TextInput(
        label="–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        placeholder="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è...",
        style=discord.TextStyle.paragraph,
        max_length=1000,
        required=True
    )
    
    screenshot_input = ui.TextInput(
        label="–°–∫—Ä–∏–Ω—à–æ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç",
        max_length=500,
        required=False
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        # –ü–∞—Ä—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        participants_text = self.participants_input.value
        participants = self._parse_participants(participants_text, interaction.guild)
        
        if not participants:
            await interaction.response.send_message(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏. –£–ø–æ–º—è–Ω–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ @ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö ID.",
                ephemeral=True
            )
            return
        
        if len(participants) > 20:  # –ú–∞–∫—Å–∏–º—É–º 20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            await interaction.response.send_message(
                "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 20).",
                ephemeral=True
            )
            return
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        screenshot_url = self.screenshot_input.value.strip() if self.screenshot_input.value else None
        if screenshot_url and not screenshot_url.startswith(('http://', 'https://')):
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL —Å–∫—Ä–∏–Ω—à–æ—Ç–∞!", ephemeral=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
        submission = EventSubmission(
            event_type=self.event_type,
            action=self.action,
            participants=[p.id for p in participants],
            submitter_id=interaction.user.id,
            group_size=len(participants),
            description=self.description_input.value.strip(),
            screenshot_url=screenshot_url
        )
        
        # –°–æ–∑–¥–∞–µ–º embed –∏ view –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
        embed = self._create_confirmation_embed(submission, participants)
        view = ChannelSelectionView(submission, participants)
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    def _parse_participants(self, text: str, guild: discord.Guild) -> List[discord.Member]:
        """–ü–∞—Ä—Å–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        participants = []
        
        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π <@!123456789> –∏–ª–∏ <@123456789>
        user_mentions = re.findall(r'<@!?(\d+)>', text)
        for user_id in user_mentions:
            member = guild.get_member(int(user_id))
            if member and member not in participants:
                participants.append(member)
        
        # –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–≤—ã–µ ID
        user_ids = re.findall(r'\b(\d{17,19})\b', text)
        for user_id in user_ids:
            if user_id not in user_mentions:  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ–º —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ
                member = guild.get_member(int(user_id))
                if member and member not in participants:
                    participants.append(member)
        
        return participants
    
    def _create_confirmation_embed(
        self, 
        submission: EventSubmission, 
        participants: List[discord.Member]
    ) -> discord.Embed:
        """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        embed = discord.Embed(
            title="ÔøΩ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
            description=f"**–°–æ–±—ã—Ç–∏–µ:** {submission.get_event_display_name()}",
            color=discord.Color.orange()
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        base_points = submission.calculate_base_points()
        embed.add_field(
            name="ÔøΩ –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏",
            value=f"{EventManager.format_points_display(base_points)} –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ",
            inline=True
        )
        
        embed.add_field(
            name="üë• –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã",
            value=f"{submission.group_size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            inline=True
        )
        
        embed.add_field(
            name="üéØ –û—á–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞",
            value="–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
            inline=True
        )
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_text = "\n".join([f"‚Ä¢ {p.display_name}" for p in participants[:10]])
        if len(participants) > 10:
            participants_text += f"\n... –∏ –µ—â—ë {len(participants) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=participants_text,
            inline=False
        )
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        embed.add_field(
            name="üìù –û–ø–∏—Å–∞–Ω–∏–µ",
            value=submission.description[:500] + ("..." if len(submission.description) > 500 else ""),
            inline=False
        )
        
        # –°–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if submission.screenshot_url:
            embed.add_field(
                name="üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç",
                value=f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç]({submission.screenshot_url})",
                inline=False
            )
        
        embed.add_field(
            name="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥",
            value="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.",
            inline=False
        )
        
        embed.set_footer(text="‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è")
        
        return embed

class ChannelSelectionView(ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    
    def __init__(self, submission: EventSubmission, participants: List[discord.Member]):
        super().__init__(timeout=300)
        self.submission = submission
        self.participants = participants
        self.add_item(ChannelSelectMenu(submission, participants))
        
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def cancel_submission(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.edit_message(
            content="‚ùå –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            embed=None,
            view=None
        )

class ChannelSelectMenu(ui.Select):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    
    def __init__(self, submission: EventSubmission, participants: List[discord.Member]):
        self.submission = submission
        self.participants = participants
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        options = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª"
        options.append(discord.SelectOption(
            label="üìù –¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª",
            value="current",
            description="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ",
            emoji="üìù"
        ))
        
        super().__init__(
            placeholder="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏...",
            min_values=1,
            max_values=1,
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        selected_value = self.values[0]
        
        if selected_value == "current":
            target_channel = interaction.channel
        else:
            # –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –¥–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã
            target_channel = interaction.channel
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π view —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        view = EventConfirmationView(self.submission, self.participants, target_channel)
        
        embed = discord.Embed(
            title="‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ",
            description=f"**–°–æ–±—ã—Ç–∏–µ:** {self.submission.get_event_display_name()}",
            color=discord.Color.green()
        )
        
        embed.add_field(
            name="üìç –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–∫–∏",
            value=target_channel.mention,
            inline=True
        )
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            value=str(self.submission.group_size),
            inline=True
        )
        
        if self.submission.screenshot_url:
            embed.add_field(
                name="üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç",
                value="‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω",
                inline=True
            )
        
        embed.add_field(
            name="üìù –û–ø–∏—Å–∞–Ω–∏–µ",
            value=self.submission.description[:200] + ("..." if len(self.submission.description) > 200 else ""),
            inline=False
        )
        
        embed.set_footer(text="üöÄ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
        
        await interaction.response.edit_message(embed=embed, view=view)

class ParticipantSelectionView(ui.View):
    """View –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∑–∞—è–≤–∫—É"""
    
    def __init__(self, submission: EventSubmission):
        super().__init__(timeout=300)
        self.submission = submission
    
    @ui.button(label="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", style=discord.ButtonStyle.primary, emoji="üë§")
    async def add_participant(self, interaction: discord.Interaction, button: ui.Button):
        modal = AddParticipantModal(self.submission)
        await interaction.response.send_modal(modal)
    
    @ui.button(label="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", style=discord.ButtonStyle.success, emoji="üìù")
    async def finish_participants(self, interaction: discord.Interaction, button: ui.Button):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        view = ScreenshotRequestView(self.submission)
        
        embed = discord.Embed(
            title="üì∑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
            description=f"**–°–æ–±—ã—Ç–∏–µ**: {self.submission.get_event_display_name()}",
            color=discord.Color.gold()
        )
        
        participants_list = []
        for i, user_id in enumerate(self.submission.participants, 1):
            user = interaction.guild.get_member(user_id)
            if user:
                participants_list.append(f"{i}. {user.mention}")
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value='\n'.join(participants_list) if participants_list else "–¢–æ–ª—å–∫–æ –≤—ã",
            inline=False
        )
        
        embed.add_field(
            name="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥", 
            value="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
            inline=False
        )
        
        await interaction.response.edit_message(embed=embed, view=view)

class AddParticipantModal(ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    
    def __init__(self, submission: EventSubmission):
        super().__init__(title="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        self.submission = submission
    
    participant_input = ui.TextInput(
        label="–£—á–∞—Å—Ç–Ω–∏–∫",
        placeholder="@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        required=True,
        max_length=100
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        participant_text = self.participant_input.value.strip()
        
        # –ü–∞—Ä—Å–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = None
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é –∏–ª–∏ ID
        user_match = re.search(r'<@!?(\d+)>|(\d+)', participant_text)
        if user_match:
            user_id = int(user_match.group(1) or user_match.group(2))
            participant = interaction.guild.get_member(user_id)
        
        if not participant:
            await interaction.response.send_message("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return
        
        if participant.id in self.submission.participants:
            await interaction.response.send_message("‚ùå –≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!", ephemeral=True)
            return
        
        if len(self.submission.participants) >= 20:
            await interaction.response.send_message("‚ùå –ú–∞–∫—Å–∏–º—É–º 20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!", ephemeral=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        self.submission.participants.append(participant.id)
        self.submission.group_size = len(self.submission.participants)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º embed
        embed = discord.Embed(
            title="üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
            description=f"**–°–æ–±—ã—Ç–∏–µ**: {self.submission.get_event_display_name()}\n**–û–ø–∏—Å–∞–Ω–∏–µ**: {self.submission.description}",
            color=discord.Color.blue()
        )
        
        participants_list = []
        for i, user_id in enumerate(self.submission.participants, 1):
            user = interaction.guild.get_member(user_id)
            if user:
                participants_list.append(f"{i}. {user.mention}")
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value='\n'.join(participants_list) if participants_list else "–¢–æ–ª—å–∫–æ –≤—ã",
            inline=False
        )
        
        embed.add_field(
            name="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥",
            value="–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.",
            inline=False
        )
        
        view = ParticipantSelectionView(self.submission)
        await interaction.response.edit_message(embed=embed, view=view)

class ScreenshotRequestView(ui.View):
    """View –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    
    def __init__(self, submission: EventSubmission):
        super().__init__(timeout=300)
        self.submission = submission
    
    @ui.button(label="üì∑ –î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", style=discord.ButtonStyle.primary)
    async def add_screenshot(self, interaction: discord.Interaction, button: ui.Button):
        modal = ScreenshotModal(self.submission)
        await interaction.response.send_modal(modal)
    
    @ui.button(label="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç", style=discord.ButtonStyle.secondary)
    async def skip_screenshot(self, interaction: discord.Interaction, button: ui.Button):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        await self._finalize_submission(interaction, None)
    
    async def _finalize_submission(self, interaction: discord.Interaction, screenshot_url: str = None):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏"""
        self.submission.screenshot_url = screenshot_url
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        participants = []
        for user_id in self.submission.participants:
            user = interaction.guild.get_member(user_id)
            if user:
                participants.append(user)
        
        # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        embed = self._create_confirmation_embed(self.submission, participants)
        view = EventConfirmationView(self.submission, participants)
        
        await interaction.response.edit_message(embed=embed, view=view)
    
    def _create_confirmation_embed(
        self, 
        submission: EventSubmission, 
        participants: List[discord.Member]
    ) -> discord.Embed:
        """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        embed = discord.Embed(
            title="üîç –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
            description=f"**–°–æ–±—ã—Ç–∏–µ:** {submission.get_event_display_name()}",
            color=discord.Color.orange()
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        base_points = submission.calculate_base_points()

class ScreenshotModal(ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    
    def __init__(self, submission: EventSubmission):
        super().__init__(title="–î–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
        self.submission = submission
    
    screenshot_input = ui.TextInput(
        label="URL —Å–∫—Ä–∏–Ω—à–æ—Ç–∞",
        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ Discord)",
        required=True,
        max_length=500
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        screenshot_url = self.screenshot_input.value.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not screenshot_url.startswith(('http://', 'https://')):
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL!", ephemeral=True)
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
        await ScreenshotRequestView(self.submission)._finalize_submission(interaction, screenshot_url)
    
    def _create_confirmation_embed(
        self, 
        submission: EventSubmission, 
        participants: List[discord.Member]
    ) -> discord.Embed:
        """–°–æ–∑–¥–∞—Ç—å embed –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        embed = discord.Embed(
            title="üîç –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
            description=f"**–°–æ–±—ã—Ç–∏–µ:** {submission.get_event_display_name()}",
            color=discord.Color.orange()
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        base_points = submission.calculate_base_points()
        embed.add_field(
            name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏",
            value=f"{EventManager.format_points_display(base_points)} –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ",
            inline=True
        )
        
        embed.add_field(
            name="üë• –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã",
            value=f"{submission.group_size} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            inline=True
        )
        
        embed.add_field(
            name="üéØ –û—á–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞",
            value="–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
            inline=True
        )
        
        # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_text = "\n".join([f"‚Ä¢ {p.display_name}" for p in participants[:10]])
        if len(participants) > 10:
            participants_text += f"\n... –∏ –µ—â—ë {len(participants) - 10} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=participants_text,
            inline=False
        )
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if submission.description:
            embed.add_field(
                name="üìù –û–ø–∏—Å–∞–Ω–∏–µ",
                value=submission.description[:200] + ("..." if len(submission.description) > 200 else ""),
                inline=False
            )
        
        embed.add_field(
            name="‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏",
            value="‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å**\n‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç\n‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
            inline=False
        )
        
        embed.set_footer(text="‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è")
        
        return embed

class SubmissionConfirmView(ui.View):
    """View –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    
    def __init__(self, session: InteractiveSubmissionSession):
        super().__init__(timeout=300)
        self.session = session
    
    @ui.button(label="üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.success)
    async def confirm_submit(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏
        if interaction.user.id != self.session.user_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É!",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        await complete_submission(interaction, self.session, self.session.screenshot_url)
        
        # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
        session_key = f"{self.session.user_id}_{self.session.channel_id}"
        if session_key in active_submissions:
            del active_submissions[session_key]
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for item in self.children:
            item.disabled = True
        
        await interaction.edit_original_response(view=self)
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.secondary)
    async def cancel_submit(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏
        if interaction.user.id != self.session.user_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å!",
                ephemeral=True
            )
            return
        
        embed = discord.Embed(
            title="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            description="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å **–æ—Ç–ø—Ä–∞–≤–∏—Ç—å** –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.",
            color=discord.Color.orange()
        )
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for item in self.children:
            item.disabled = True
        
        await interaction.response.edit_message(embed=embed, view=self)

class EventConfirmationView(ui.View):
    """View –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    
    def __init__(self, submission: EventSubmission, participants: List[discord.Member], target_channel: discord.TextChannel = None, original_message_id: int = None, original_channel_id: int = None):
        super().__init__(timeout=300)
        self.submission = submission
        self.participants = participants
        self.target_channel = target_channel
        self.original_message_id = original_message_id
        self.original_channel_id = original_channel_id
    
    @ui.button(label="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.success)
    async def confirm_button(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏
        if interaction.user.id != self.submission.submitter_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –µ—ë –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
                ephemeral=True
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –¥–ª—è –∑–∞—è–≤–∫–∏
        if self.target_channel:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
            target_channel = self.target_channel
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            forum_channel = await self._get_events_forum_channel(interaction.guild)
            if not forum_channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            target_channel = forum_channel
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥
        thread_name = f"{self.submission.get_event_display_name()} - {interaction.user.display_name}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–¥–∞
        participants_mentions = " ".join([p.mention for p in self.participants])
        thread_content = f"""
**üìã –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ**

**üéØ –°–æ–±—ã—Ç–∏–µ:** {self.submission.get_event_display_name()}
**üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å:** {interaction.user.mention}
**üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants_mentions}
**üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏:** {EventManager.format_points_display(self.submission.calculate_base_points())}
**üî¢ –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã:** {self.submission.group_size}

{f"**üìù –û–ø–∏—Å–∞–Ω–∏–µ:** {self.submission.description}" if self.submission.description else ""}

**‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è:** –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–±—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!
        """.strip()
        
        try:
            # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            original_message = None
            original_channel = None
            
            if not self.original_message_id or not self.original_channel_id:
                # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
                embed = discord.Embed(
                    title="üìù –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
                    description=f"**–°–æ–±—ã—Ç–∏–µ**: {self.submission.get_event_display_name()}",
                    color=discord.Color.blue()
                )
                
                embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
                embed.add_field(name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏", value=f"{EventManager.format_points_display(self.submission.calculate_base_points())}", inline=True)
                embed.add_field(name="üîÑ –°—Ç–∞—Ç—É—Å", value="‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è", inline=True)
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
                import time
                temp_id = f"temp_{int(time.time())}_{interaction.user.id}"
                embed.set_footer(text=f"–ó–∞—è–≤–∫–∞ ID: {temp_id}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.target_channel:
                    events_channel = self.target_channel
                else:
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
                    events_channel_id = await EventDatabase.get_events_channel(interaction.guild.id)
                    if events_channel_id:
                        events_channel = interaction.guild.get_channel(events_channel_id)
                    else:
                        events_channel = interaction.channel
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                original_message = await events_channel.send(embed=embed)
                original_channel = events_channel
                
                self.original_message_id = original_message.id
                self.original_channel_id = original_channel.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
            if isinstance(target_channel, discord.ForumChannel):
                # –§–æ—Ä—É–º - —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                thread_with_msg = await target_channel.create_thread(
                    name=thread_name[:100],  # Discord –ª–∏–º–∏—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞
                    content=thread_content
                )
                thread = thread_with_msg.thread
            else:
                # –û–±—ã—á–Ω—ã–π –∫–∞–Ω–∞–ª - —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await target_channel.send(content=thread_content)
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                thread = await message.create_thread(
                    name=thread_name[:100]
                )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–¥—É
            await self._setup_thread_permissions(thread, interaction.user.id, interaction.guild)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            submission_id = await EventDatabase.create_event_submission(
                guild_id=interaction.guild.id,
                submission=self.submission,
                thread_id=thread.id,
                original_message_id=self.original_message_id,
                original_channel_id=self.original_channel_id
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º footer –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç–æ—è—â–∏–º ID –∑–∞—è–≤–∫–∏
            if original_message and submission_id:
                try:
                    embed = original_message.embeds[0]
                    embed.set_footer(text=f"–ó–∞—è–≤–∫–∞ ID: {submission_id}")
                    await original_message.edit(embed=embed)
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω footer –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ {submission_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è footer –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –°–æ–∑–¥–∞–µ–º view –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            moderator_view = EventModerationView(submission_id, self.submission)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
            await thread.send(
                "**üîç –ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
                "üì∏ **–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!**",
                view=moderator_view
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
            await thread.send(
                f"{interaction.user.mention} üì∏ **–í–∞–∂–Ω–æ:** –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–±—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n\n"
                "**–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ:**\n"
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞\n"
                "‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –≤ –∫–∞–¥—Ä–µ\n"
                "‚Ä¢ –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)\n"
                "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç (–∑–∞—Ö–≤–∞—Ç/–¥–æ—Å—Ç–∞–≤–∫–∞/—É–±–∏–π—Å—Ç–≤–æ)"
            )
            
        except discord.Forbidden:
            await interaction.response.send_message(
                "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                ephemeral=True
            )
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞: {e}")
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                ephemeral=True
            )
            return
        
        await interaction.response.send_message(
            f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç—Ä–µ–¥: {thread.mention}\n"
            f"üì∏ **–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–±—ã—Ç–∏—è!**",
            ephemeral=True
        )
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def cancel_button(self, interaction: discord.Interaction, button: ui.Button):
        if interaction.user.id != self.submission.submitter_id:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∑–∞—è–≤–∫–∏ –º–æ–∂–µ—Ç –µ—ë –æ—Ç–º–µ–Ω–∏—Ç—å.",
                ephemeral=True
            )
            return
        
        await interaction.response.send_message("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=True)
    
    async def _get_events_forum_channel(self, guild: discord.Guild) -> Optional[discord.ForumChannel]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª —Ñ–æ—Ä—É–º–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π"""
        # –ò—â–µ–º –∫–∞–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–¥–µ—Ä–∂–∞—â–∏–º "event" –∏–ª–∏ "—Å–æ–±—ã—Ç–∏"
        for channel in guild.channels:
            if isinstance(channel, discord.ForumChannel):
                name_lower = channel.name.lower()
                if any(keyword in name_lower for keyword in ['event', '—Å–æ–±—ã—Ç–∏', '–∏–≤–µ–Ω—Ç']):
                    return channel
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–æ—Ä—É–º –∫–∞–Ω–∞–ª
        for channel in guild.channels:
            if isinstance(channel, discord.ForumChannel):
                return channel
        
        return None
    
    async def _setup_thread_permissions(self, thread: discord.Thread, submitter_id: int, guild: discord.Guild):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–¥—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏ –¥–ª—è —Ä–æ–ª–µ–π —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤
            import aiosqlite
            from database import DB_PATH
            
            async with aiosqlite.connect(DB_PATH) as db:
                cursor = await db.execute("""
                    SELECT recruiter_roles FROM guild_config WHERE guild_id = ?
                """, (guild.id,))
                row = await cursor.fetchone()
                await cursor.close()
            
            if not row:
                return
            
            recruiter_role_ids = row[0]
            if not recruiter_role_ids:
                return
            
            # –ü–∞—Ä—Å–∏–º ID —Ä–æ–ª–µ–π
            role_ids = [int(rid) for rid in recruiter_role_ids.split(',') if rid.strip().isdigit()]
            
            # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—Å–µ–º –ø–∏—Å–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await thread.edit(
                send_messages=False
            )
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞—è–≤–∏—Ç–µ–ª—é
            submitter = guild.get_member(submitter_id)
            if submitter:
                await thread.set_permissions(submitter, send_messages=True, read_messages=True)
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for role_id in role_ids:
                role = guild.get_role(role_id)
                if role:
                    await thread.set_permissions(role, send_messages=True, read_messages=True)
            
            # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for role in guild.roles:
                if role.permissions.administrator:
                    await thread.set_permissions(role, send_messages=True, read_messages=True)
                    
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∞ —Ç—Ä–µ–¥–∞: {e}")

class PointsInputModal(ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤"""
    
    def __init__(self, submission_id: int):
        super().__init__(title="–£–∫–∞–∑–∞—Ç—å –æ—á–∫–∏ –∑–∞ —Å–æ–±—ã—Ç–∏–µ")
        self.submission_id = submission_id
    
    points_input = ui.TextInput(
        label="–û—á–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        required=True,
        max_length=10
    )
    
    notes_input = ui.TextInput(
        label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        placeholder="–ü—Ä–∏—á–∏–Ω–∞ —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤...",
        style=discord.TextStyle.paragraph,
        required=False,
        max_length=500
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            points_per_person = float(self.points_input.value)
            if points_per_person < 0:
                await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º!", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞!", ephemeral=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
        submission_details = await EventDatabase.get_submission_details(self.submission_id)
        if not submission_details:
            await interaction.response.send_message("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
            return
        
        guild_id = submission_details.get('guild_id')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º
        can_award, error_message = await check_points_date_restrictions(guild_id)
        if not can_award:
            await interaction.response.send_message(error_message, ephemeral=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {self.submission_id} –Ω–∞ 'approved'")
        success = await EventDatabase.update_submission_status(
            self.submission_id,
            "approved",
            interaction.user.id,
            final_points_per_person=points_per_person
        )
        
        if not success:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {self.submission_id}")
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!", ephemeral=True)
            return
        else:
            logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {self.submission_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'approved'")
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        participants = await EventDatabase.get_submission_participants(self.submission_id)
        guild_id = submission_details.get('guild_id')
        
        for participant_id in participants:
            await EventDatabase.add_user_points(guild_id, participant_id, points_per_person)
        
        # –°–æ–∑–¥–∞–µ–º embed —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        embed = discord.Embed(
            title="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ—á–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã",
            color=discord.Color.green()
        )
        
        embed.add_field(name="üìù –ó–∞—è–≤–∫–∞", value=f"ID: {self.submission_id}", inline=True)
        embed.add_field(name="üí∞ –û—á–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞", value=f"{points_per_person}", inline=True)
        embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=f"{len(participants)}", inline=True)
        embed.add_field(name="üìä –í—Å–µ–≥–æ –æ—á–∫–æ–≤", value=f"{points_per_person * len(participants)}", inline=True)
        embed.add_field(name="üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
        embed.add_field(name="‚è∞ –í—Ä–µ–º—è", value=f"<t:{int(interaction.created_at.timestamp())}:F>", inline=True)
        
        if self.notes_input.value:
            embed.add_field(name="üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", value=self.notes_input.value, inline=False)
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

class MultiplierSelectMenu(ui.Select):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è –æ—á–∫–æ–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    
    def __init__(self, submission_id: int):
        self.submission_id = submission_id
        
        options = []
        for value, label in get_multiplier_options():
            options.append(discord.SelectOption(
                label=f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å {label}",
                value=value,
                description=f"–£–º–Ω–æ–∂–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –Ω–∞ {label}"
            ))
        
        super().__init__(
            placeholder="üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—á–∫–æ–≤...",
            min_values=1,
            max_values=1,
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        multiplier = float(self.values[0])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        submission_details = await EventDatabase.get_submission_details(self.submission_id)
        if not submission_details:
            await interaction.response.send_message("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return
        
        base_points = submission_details['base_points']
        group_size = submission_details['group_size']
        final_points = EventManager.calculate_final_points(base_points, multiplier, group_size)
        
        # –°–æ–∑–¥–∞–µ–º embed –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        embed = discord.Embed(
            title="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤",
            color=discord.Color.green()
        )
        
        embed.add_field(name="üìä –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏", value=str(base_points), inline=True)
        embed.add_field(name="‚úñÔ∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å", value=f"x{multiplier}", inline=True)
        embed.add_field(name="üë• –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", value=str(group_size), inline=True)
        embed.add_field(
            name="üéØ –û—á–∫–∏ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É", 
            value=f"**{EventManager.format_points_display(final_points)}**",
            inline=False
        )
        embed.add_field(
            name="üí∞ –í—Å–µ–≥–æ –æ—á–∫–æ–≤ –∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—é",
            value=f"**{EventManager.format_points_display(final_points * group_size)}**",
            inline=False
        )
        
        view = FinalApprovalView(self.submission_id, multiplier)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class FinalApprovalView(ui.View):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤"""
    
    def __init__(self, submission_id: int, multiplier: float):
        super().__init__(timeout=300)
        self.submission_id = submission_id
        self.multiplier = multiplier
    
    @ui.button(label="‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏", style=discord.ButtonStyle.success)
    async def approve_button(self, interaction: discord.Interaction, button: ui.Button):
        success = await EventDatabase.approve_event_submission(
            self.submission_id,
            interaction.user.id,
            self.multiplier
        )
        
        if success:
            submission_details = await EventDatabase.get_submission_details(self.submission_id)
            final_points = submission_details['final_points_per_person']
            
            await interaction.response.send_message(
                f"‚úÖ –û—á–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã! –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª **{EventManager.format_points_display(final_points)}** –æ—á–∫–æ–≤.",
                ephemeral=True
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —Ç—Ä–µ–¥–µ
            thread = interaction.guild.get_thread(submission_details['thread_id'])
            if thread:
                await thread.send(
                    f"‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!** –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {interaction.user.mention}\n"
                    f"üéØ –ù–∞—á–∏—Å–ª–µ–Ω–æ **{EventManager.format_points_display(final_points)}** –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É"
                )
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                ephemeral=True
            )
    
    @ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger)
    async def reject_button(self, interaction: discord.Interaction, button: ui.Button):
        modal = RejectReasonModal(self.submission_id)
        await interaction.response.send_modal(modal)

class RejectReasonModal(ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    
    def __init__(self, submission_id: int):
        super().__init__(title="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        self.submission_id = submission_id
        
        self.reason_input = ui.TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏...",
            style=discord.TextStyle.paragraph,
            max_length=500,
            required=True
        )
        
        self.add_item(self.reason_input)
    
    async def on_submit(self, interaction: discord.Interaction):
        reason = self.reason_input.value.strip()
        
        success = await EventDatabase.reject_event_submission(
            self.submission_id,
            interaction.user.id,
            reason
        )
        
        if success:
            # –°–æ–∑–¥–∞–µ–º embed —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            embed = discord.Embed(
                title="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                description=f"–ó–∞—è–≤–∫–∞ #{self.submission_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                color=discord.Color.red()
            )
            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
            embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
            
            # –°–æ–∑–¥–∞–µ–º view –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            completion_view = EventCompletionView(self.submission_id, "rejected")
            
            await interaction.response.send_message(embed=embed, view=completion_view, ephemeral=False)
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )

class PointsSelectionView(ui.View):
    """View –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤"""
    
    def __init__(self, submission_id: int):
        super().__init__(timeout=300)  # 5 –º–∏–Ω—É—Ç
        self.submission_id = submission_id
        self.add_item(PointsSelectMenu(submission_id))

class PointsSelectMenu(ui.Select):
    """Select Menu –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤"""
    
    def __init__(self, submission_id: int):
        self.submission_id = submission_id
        
        options = [
            discord.SelectOption(
                label="1 –æ—á–∫–æ", 
                value="1",
                description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ",
                emoji="ü•â"
            ),
            discord.SelectOption(
                label="2 –æ—á–∫–∞", 
                value="2",
                description="–ë–∞–∑–æ–≤–æ–µ —É—á–∞—Å—Ç–∏–µ",
                emoji="ü•à"
            ),
            discord.SelectOption(
                label="3 –æ—á–∫–∞", 
                value="3",
                description="–•–æ—Ä–æ—à–µ–µ —É—á–∞—Å—Ç–∏–µ",
                emoji="ü•á"
            ),
            discord.SelectOption(
                label="5 –æ—á–∫–æ–≤", 
                value="5",
                description="–û—Ç–ª–∏—á–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ",
                emoji="‚≠ê"
            ),
            discord.SelectOption(
                label="8 –æ—á–∫–æ–≤", 
                value="8",
                description="–í—ã–¥–∞—é—â–µ–µ—Å—è —É—á–∞—Å—Ç–∏–µ",
                emoji="üíé"
            ),
            discord.SelectOption(
                label="10 –æ—á–∫–æ–≤", 
                value="10",
                description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ",
                emoji="üëë"
            ),
            discord.SelectOption(
                label="0 –æ—á–∫–æ–≤", 
                value="0",
                description="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –±–µ–∑ –æ—á–∫–æ–≤",
                emoji="‚ùå"
            )
        ]
        
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤...",
            min_values=1,
            max_values=1,
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        points_per_person = float(self.values[0])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
        submission_details = await EventDatabase.get_submission_details(self.submission_id)
        if not submission_details:
            await interaction.response.send_message("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
            return
        
        if points_per_person == 0:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
            logger.info(f"–û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É {self.submission_id}")
            success = await EventDatabase.update_submission_status(
                self.submission_id,
                "rejected",
                interaction.user.id
            )
            
            if success:
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {self.submission_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'rejected'")
                embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    description=f"–ó–∞—è–≤–∫–∞ #{self.submission_id} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    color=discord.Color.red()
                )
                embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
                
                # –°–æ–∑–¥–∞–µ–º view –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
                completion_view = EventCompletionView(self.submission_id, "rejected")
                
                await interaction.response.edit_message(embed=embed, view=completion_view)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {self.submission_id}")
                await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!", ephemeral=True)
        else:
            # –ü–æ–ª—É—á–∞–µ–º guild_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç
            guild_id = submission_details.get('guild_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–∞—Ç–∞–º
            can_award, error_message = await check_points_date_restrictions(guild_id)
            if not can_award:
                await interaction.response.send_message(error_message, ephemeral=True)
                return
            
            # –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É
            logger.info(f"–û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É {self.submission_id} —Å {points_per_person} –æ—á–∫–∞–º–∏")
            success = await EventDatabase.update_submission_status(
                self.submission_id,
                "approved",
                interaction.user.id,
                final_points_per_person=points_per_person
            )
            
            if not success:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {self.submission_id}")
                await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏!", ephemeral=True)
                return
            else:
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {self.submission_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'approved' —Å {points_per_person} –æ—á–∫–∞–º–∏")
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            participants = await EventDatabase.get_submission_participants(self.submission_id)
            
            for participant_id in participants:
                await EventDatabase.add_user_points(guild_id, participant_id, points_per_person)
            
            # –°–æ–∑–¥–∞–µ–º embed —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            embed = discord.Embed(
                title="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                description=f"–ó–∞—è–≤–∫–∞ #{self.submission_id} –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ—á–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!",
                color=discord.Color.green()
            )
            embed.add_field(name="üíé –û—á–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞", value=str(points_per_person), inline=True)
            embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(len(participants)), inline=True)
            embed.add_field(name="üí∞ –í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ", value=str(points_per_person * len(participants)), inline=True)
            embed.add_field(name="üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=False)
            
            # –°–æ–∑–¥–∞–µ–º view –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
            completion_view = EventCompletionView(self.submission_id, "approved")
            
            await interaction.response.edit_message(embed=embed, view=completion_view)

async def update_original_submission_message(submission_id: int, status: str, moderator_name: str, points: float = None, reason: str = None, interaction=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç—Ä–µ–¥"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {submission_id}, —Å—Ç–∞—Ç—É—Å: {status}")
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ interaction
        if interaction is None:
            logger.error("–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è interaction")
            return
        
        bot = interaction.client
        async with aiosqlite.connect("potatos_recruit.db") as db:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤–∫–ª—é—á–∞—è thread_id
            cursor = await db.execute("""
                SELECT message_id, guild_id, submitter_id, event_type, action, screenshot_url, thread_id
                FROM event_submissions 
                WHERE id = ?
            """, (submission_id,))
            
            row = await cursor.fetchone()
            if not row:
                logger.error(f"–ó–∞—è–≤–∫–∞ {submission_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            message_id, guild_id, submitter_id, event_type, action, screenshot_url, thread_id = row
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: message_id={message_id}, guild_id={guild_id}, thread_id={thread_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = await EventDatabase.get_submission_participants(submission_id)
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
            
            # –°–æ–∑–¥–∞–µ–º submission –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            submission = EventSubmission(
                event_type=EventType(event_type),
                action=EventAction(action),
                participants=participants,
                submitter_id=submitter_id,
                screenshot_url=screenshot_url
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π embed
            if status == "approved":
                embed = discord.Embed(
                    title="‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
                    description=f"**–°–æ–±—ã—Ç–∏–µ**: {submission.get_event_display_name()}",
                    color=discord.Color.green()
                )
                embed.add_field(name="üÜî ID –∑–∞—è–≤–∫–∏", value=str(submission_id), inline=True)
                embed.add_field(name="üíé –û—á–∫–∏ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞", value=str(points) if points else "N/A", inline=True)
                embed.add_field(name="üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=moderator_name, inline=True)
                embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=f"<@{submitter_id}>", inline=True)
                embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(len(participants)), inline=True)
                embed.add_field(name="üìÖ –°—Ç–∞—Ç—É—Å", value="‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞", inline=True)
            elif status == "rejected":
                embed = discord.Embed(
                    title="‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    description=f"**–°–æ–±—ã—Ç–∏–µ**: {submission.get_event_display_name()}",
                    color=discord.Color.red()
                )
                embed.add_field(name="üÜî ID –∑–∞—è–≤–∫–∏", value=str(submission_id), inline=True)
                embed.add_field(name="üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=moderator_name, inline=True)
                embed.add_field(name="üë§ –ó–∞—è–≤–∏—Ç–µ–ª—å", value=f"<@{submitter_id}>", inline=True)
                embed.add_field(name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(len(participants)), inline=True)
                embed.add_field(name="üìÖ –°—Ç–∞—Ç—É—Å", value="‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", inline=True)
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if reason:
                    embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è", value=reason, inline=False)
            else:
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants_list = []
            for user_id in participants:
                participants_list.append(f"<@{user_id}>")
            
            if participants_list:
                embed.add_field(
                    name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
                    value='\n'.join(participants_list),
                    inline=False
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
            if screenshot_url:
                embed.add_field(name="üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç", value=f"[–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å]({screenshot_url})", inline=False)
                embed.set_image(url=screenshot_url)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç—Ä–µ–¥–∞
            embed.set_footer(text="–ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ‚Ä¢ –¢—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç")
            
            # –†–∞–±–æ—Ç–∞–µ–º —Å –≥–∏–ª—å–¥–∏—è–º–∏ –±–æ—Ç–∞
            for guild in bot.guilds:
                if guild.id == guild_id:
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –≥–∏–ª—å–¥–∏—è {guild.name} (ID: {guild_id})")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ –ø–µ—Ä–µ–¥ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                    if thread_id:
                        logger.info(f"–ò—â–µ–º —Ç—Ä–µ–¥ —Å ID: {thread_id}")
                        try:
                            thread = guild.get_thread(thread_id)
                            if thread:
                                logger.info(f"–¢—Ä–µ–¥ –Ω–∞–π–¥–µ–Ω: {thread.name}")
                                if status == "approved":
                                    await thread.send(
                                        f"‚úÖ **–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞** –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_name}\n"
                                        f"üíé **–û—á–∫–∏:** {points if points else 'N/A'} –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞\n"
                                        f"üîí **–¢—Ä–µ–¥ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç**"
                                    )
                                elif status == "rejected":
                                    reject_message = f"‚ùå **–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞** –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_name}\n"
                                    if reason:
                                        reject_message += f"üìù **–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
                                    reject_message += "üîí **–¢—Ä–µ–¥ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç**"
                                    await thread.send(reject_message)
                                
                                # –¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–¥
                                await thread.edit(archived=True, reason=f"–ó–∞—è–≤–∫–∞ {status} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_name}")
                                logger.info(f"–¢—Ä–µ–¥ {thread_id} –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ {status} –∑–∞—è–≤–∫–∏ {submission_id}")
                            else:
                                logger.warning(f"–¢—Ä–µ–¥ —Å ID {thread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–¥–æ–º {thread_id}: {e}")
                    else:
                        logger.warning(f"thread_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ {submission_id}")
                    
                    # –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if message_id:
                        logger.info(f"–ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}")
                        message_found = False
                        
                        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç—Ä–µ–¥–µ, –µ—Å–ª–∏ thread_id –∏–∑–≤–µ—Å—Ç–µ–Ω
                        if thread_id:
                            try:
                                target_thread = guild.get_thread(thread_id)
                                if target_thread:
                                    message = await target_thread.fetch_message(message_id)
                                    await message.edit(embed=embed, view=None)
                                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {submission_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status} –≤ —Ç—Ä–µ–¥–µ {target_thread.name}")
                                    message_found = True
                            except discord.NotFound:
                                logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç—Ä–µ–¥–µ {thread_id}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥–µ {thread_id}: {e}")
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ü–µ–ª–µ–≤–æ–º —Ç—Ä–µ–¥–µ, –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
                        if not message_found:
                            logger.info("–ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö...")
                            for channel in guild.text_channels:
                                try:
                                    message = await channel.fetch_message(message_id)
                                    await message.edit(embed=embed, view=None)
                                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {submission_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status} –≤ –∫–∞–Ω–∞–ª–µ {channel.name}")
                                    message_found = True
                                    break
                                except discord.NotFound:
                                    continue
                                except discord.Forbidden:
                                    logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel.name}")
                                    continue
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ {channel.name}: {e}")
                                    continue
                        
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö, –∏—â–µ–º –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ–¥–∞—Ö
                        if not message_found:
                            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±—ã—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö, –∏—â–µ–º –≤–æ –≤—Å–µ—Ö —Ç—Ä–µ–¥–∞—Ö...")
                            for channel in guild.text_channels:
                                # –ò—â–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–∞—Ö
                                for thread in channel.threads:
                                    try:
                                        message = await thread.fetch_message(message_id)
                                        await message.edit(embed=embed, view=None)
                                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {submission_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status} –≤ —Ç—Ä–µ–¥–µ {thread.name}")
                                        message_found = True
                                        break
                                    except discord.NotFound:
                                        continue
                                    except discord.Forbidden:
                                        continue
                                    except Exception:
                                        continue
                                
                                # –ò—â–µ–º –≤ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–¥–∞—Ö
                                if not message_found:
                                    try:
                                        async for archived_thread in channel.archived_threads(limit=50):
                                            try:
                                                message = await archived_thread.fetch_message(message_id)
                                                await message.edit(embed=embed, view=None)
                                                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {submission_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status} –≤ –∞—Ä—Ö–∏–≤–Ω–æ–º —Ç—Ä–µ–¥–µ {archived_thread.name}")
                                                message_found = True
                                                break
                                            except discord.NotFound:
                                                continue
                                            except discord.Forbidden:
                                                continue
                                            except Exception:
                                                continue
                                    except Exception as e:
                                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ç—Ä–µ–¥–∞—Ö –∫–∞–Ω–∞–ª–∞ {channel.name}: {e}")
                                
                                if message_found:
                                    break
                        
                        if not message_found:
                            logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —Ç—Ä–µ–¥–µ")
                    else:
                        logger.warning(f"message_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ {submission_id}")
                    
                    break
            else:
                logger.error(f"–ì–∏–ª—å–¥–∏—è —Å ID {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            if status == "approved":
                await update_original_event_message_by_submission_id(
                    submission_id, 
                    bot.get_guild(guild_id), 
                    "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞", 
                    discord.Color.green()
                )
            elif status == "rejected":
                await update_original_event_message_by_submission_id(
                    submission_id, 
                    bot.get_guild(guild_id), 
                    "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", 
                    discord.Color.red()
                )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")

class EventModerationView(ui.View):
    """View –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, submission_id: int, submission: EventSubmission):
        super().__init__(timeout=None)  # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è view
        self.submission_id = submission_id
        self.submission = submission
    
    @ui.button(label="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", style=discord.ButtonStyle.success, custom_id="approve_event")
    async def approve_button(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏)
        if not (interaction.user.guild_permissions.manage_messages or 
                interaction.user.guild_permissions.administrator):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π.",
                ephemeral=True
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Select Menu –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—á–∫–æ–≤
        view = PointsSelectionView(self.submission_id)
        embed = discord.Embed(
            title="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è:",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    
    @ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="reject_event")
    async def reject_button(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not (interaction.user.guild_permissions.manage_messages or 
                interaction.user.guild_permissions.administrator):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π.",
                ephemeral=True
            )
            return
        
        modal = RejectReasonModal(self.submission_id)
        await interaction.response.send_modal(modal)

class EventCompletionView(ui.View):
    """View –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    
    def __init__(self, submission_id: int, status: str):
        super().__init__(timeout=300)  # 5 –º–∏–Ω—É—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.submission_id = submission_id
        self.status = status  # "approved" –∏–ª–∏ "rejected"
    
    @ui.button(label="üîí –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.secondary, custom_id="close_submission")
    async def close_submission_button(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        if not (interaction.user.guild_permissions.manage_messages or 
                interaction.user.guild_permissions.administrator):
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–æ–∫.",
                ephemeral=True
            )
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
            submission_details = await EventDatabase.get_submission_details(self.submission_id)
            if not submission_details:
                await interaction.response.send_message("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
                return
            
            guild_id = submission_details.get('guild_id')
            guild = interaction.guild or interaction.client.get_guild(guild_id)
            
            if not guild:
                await interaction.response.send_message("‚ùå –ì–∏–ª—å–¥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            if self.status == "approved":
                await update_original_event_message_by_submission_id(
                    self.submission_id, 
                    guild, 
                    "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞", 
                    discord.Color.green()
                )
                status_text = "–æ–¥–æ–±—Ä–µ–Ω–∞"
                status_emoji = "‚úÖ"
            else:  # rejected
                await update_original_event_message_by_submission_id(
                    self.submission_id, 
                    guild, 
                    "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞", 
                    discord.Color.red()
                )
                status_text = "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                status_emoji = "‚ùå"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º embed —Ç—Ä–µ–¥–∞ –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            embed = discord.Embed(
                title=f"{status_emoji} –ó–∞—è–≤–∫–∞ {status_text} –∏ –∑–∞–∫—Ä—ã—Ç–∞",
                description=f"–ó–∞—è–≤–∫–∞ #{self.submission_id} –±—ã–ª–∞ {status_text} –∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}.",
                color=discord.Color.green() if self.status == "approved" else discord.Color.red()
            )
            embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=f"{status_emoji} {status_text.capitalize()}", inline=True)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            for item in self.children:
                item.disabled = True
            
            await interaction.response.edit_message(embed=embed, view=self)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ–¥ (–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º)
            if hasattr(interaction.channel, 'archived'):
                try:
                    await interaction.channel.edit(archived=True, locked=True)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–¥: {e}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏ {self.submission_id}: {e}")
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}", ephemeral=True)

class EventSubmissionView(ui.View):
    """–ì–ª–∞–≤–Ω–∞—è view –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è"""
    
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(EventSelectMenu())

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
class EventSubmitButton(ui.Button):
    def __init__(self):
        super().__init__(
            label="üéØ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ",
            style=discord.ButtonStyle.primary,
            custom_id="event_submit_button"
        )
    
    async def callback(self, interaction: discord.Interaction):
        view = EventSubmissionView()
        await interaction.response.send_message(
            "üéØ **–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            view=view,
            ephemeral=True
        )

class PersistentEventSubmitView(ui.View):
    """–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è view —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(EventSubmitButton())

# ‚îÄ‚îÄ‚îÄ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

class ShopModerationView(ui.View):
    """View —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫"""
    
    def __init__(self, purchase_id: int, buyer_id: int = 0, item = None):
        super().__init__(timeout=24*60*60)  # 24 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ None –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        self.purchase_id = purchase_id
        self.buyer_id = buyer_id
        self.item = item
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ custom_id –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏
        self.clear_items()
        
        approve_btn = ui.Button(
            label="‚úÖ –í—ã–¥–∞—Ç—å",
            style=discord.ButtonStyle.success,
            custom_id=f"shop_approve_{purchase_id}"
        )
        approve_btn.callback = self._approve_callback
        
        reject_btn = ui.Button(
            label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
            style=discord.ButtonStyle.danger,
            custom_id=f"shop_reject_{purchase_id}"
        )
        reject_btn.callback = self._reject_callback
        
        self.add_item(approve_btn)
        self.add_item(reject_btn)
    
    async def _approve_callback(self, interaction: discord.Interaction):
        """–û–¥–æ–±—Ä–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
        # –ü–æ–ª—É—á–∞–µ–º purchase_id –∏–∑ custom_id –∫–Ω–æ–ø–∫–∏
        button = interaction.data.get('custom_id', '')
        if button.startswith('shop_approve_'):
            purchase_id = int(button.split('_')[-1])
        else:
            purchase_id = self.purchase_id
            
        if purchase_id <= 0:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–∫—É–ø–∫–∏", ephemeral=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∏–∑ –±–∞–∑—ã
        purchase_data = await EventDatabase.get_purchase_by_id(purchase_id)
        if not purchase_data:
            await interaction.response.send_message("‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not interaction.user.guild_permissions.administrator:
            guild_config = await EventDatabase.get_guild_config(interaction.guild.id)
            points_moderator_roles = guild_config.get('points_moderator_roles', '')
            
            user_role_ids = [role.id for role in interaction.user.roles]
            moderator_role_ids = [int(rid.strip()) for rid in points_moderator_roles.split(',') if rid.strip().isdigit()]
            
            if not any(role_id in user_role_ids for role_id in moderator_role_ids):
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫!", 
                    ephemeral=True
                )
                return
        
        await interaction.response.defer()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
        success = await EventDatabase.process_shop_purchase(
            purchase_id=purchase_id,
            admin_id=interaction.user.id,
            completed=True,
            admin_notes="–í—ã–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
        )
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            from events import ShopManager
            item = ShopManager.get_item_by_id(purchase_data['item_id'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            embed = discord.Embed(
                title="‚úÖ –ü–æ–∫—É–ø–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
                color=discord.Color.green(),
                timestamp=interaction.created_at
            )
            
            embed.add_field(name="üÜî ID –ø–æ–∫—É–ø–∫–∏", value=f"#{purchase_id}", inline=True)
            embed.add_field(name="üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", value=f"<@{purchase_data['user_id']}>", inline=True)
            embed.add_field(name="üéÅ –¢–æ–≤–∞—Ä", value=purchase_data['item_name'], inline=True)
            embed.add_field(name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
            if item:
                embed.add_field(name="üìù –û–ø–∏—Å–∞–Ω–∏–µ", value=item.description, inline=False)
            
            embed.set_footer(text="–¢–æ–≤–∞—Ä –≤—ã–¥–∞–Ω!")
            
            # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            view = ui.View()
            
            await interaction.edit_original_response(embed=embed, view=view)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –õ–°
            try:
                buyer = interaction.guild.get_member(purchase_data['user_id'])
                if buyer:
                    dm_embed = discord.Embed(
                        title="‚úÖ –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –≤—ã–¥–∞–Ω–∞!",
                        description=f"–¢–æ–≤–∞—Ä **{purchase_data['item_name']}** –±—ã–ª –≤—ã–¥–∞–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.mention}",
                        color=discord.Color.green()
                    )
                    await buyer.send(embed=dm_embed)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–°
                
        else:
            await interaction.followup.send(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                ephemeral=True
            )
    
    async def _reject_callback(self, interaction: discord.Interaction):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É"""
        # –ü–æ–ª—É—á–∞–µ–º purchase_id –∏–∑ custom_id –∫–Ω–æ–ø–∫–∏
        button = interaction.data.get('custom_id', '')
        if button.startswith('shop_reject_'):
            purchase_id = int(button.split('_')[-1])
        else:
            purchase_id = self.purchase_id
            
        if purchase_id <= 0:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–∫—É–ø–∫–∏", ephemeral=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∏–∑ –±–∞–∑—ã
        purchase_data = await EventDatabase.get_purchase_by_id(purchase_id)
        if not purchase_data:
            await interaction.response.send_message("‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not interaction.user.guild_permissions.administrator:
            guild_config = await EventDatabase.get_guild_config(interaction.guild.id)
            points_moderator_roles = guild_config.get('points_moderator_roles', '')
            
            user_role_ids = [role.id for role in interaction.user.roles]
            moderator_role_ids = [int(rid.strip()) for rid in points_moderator_roles.split(',') if rid.strip().isdigit()]
            
            if not any(role_id in user_role_ids for role_id in moderator_role_ids):
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫!", 
                    ephemeral=True
                )
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã
        modal = RejectPurchaseModal(purchase_id, purchase_data['user_id'], purchase_data)
        await interaction.response.send_modal(modal)

class RejectPurchaseModal(ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    
    def __init__(self, purchase_id: int, buyer_id: int, purchase_data: dict):
        super().__init__(title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏")
        self.purchase_id = purchase_id
        self.buyer_id = buyer_id
        self.purchase_data = purchase_data
    
    reason = ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏...",
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=500
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
        success = await EventDatabase.process_shop_purchase(
            purchase_id=self.purchase_id,
            admin_id=interaction.user.id,
            completed=False,
            admin_notes=self.reason.value
        )
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            embed = discord.Embed(
                title="‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!",
                color=discord.Color.red(),
                timestamp=interaction.created_at
            )
            
            embed.add_field(name="üÜî ID –ø–æ–∫—É–ø–∫–∏", value=f"#{self.purchase_id}", inline=True)
            embed.add_field(name="üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", value=f"<@{self.buyer_id}>", inline=True)
            embed.add_field(name="üéÅ –¢–æ–≤–∞—Ä", value=self.purchase_data['item_name'], inline=True)
            embed.add_field(name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
            embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞", value=self.reason.value, inline=False)
            
            embed.set_footer(text="–û—á–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é")
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ interaction
                original_message = None
                
                # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                async for message in interaction.channel.history(limit=50):
                    if (message.embeds and 
                        len(message.embeds) > 0 and 
                        message.embeds[0].title == "üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!" and
                        f"#{self.purchase_id}" in str(message.embeds[0].fields[0].value)):
                        original_message = message
                        break
                
                if original_message:
                    view = ui.View()  # –ü—É—Å—Ç–æ–µ view –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                    await original_message.edit(embed=embed, view=view)
                else:
                    await interaction.followup.send(embed=embed)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ: {e}")
                await interaction.followup.send(embed=embed)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ –õ–°
            try:
                buyer = interaction.guild.get_member(self.buyer_id)
                if buyer:
                    dm_embed = discord.Embed(
                        title="‚ùå –í–∞—à–∞ –ø–æ–∫—É–ø–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                        description=f"–ü–æ–∫—É–ø–∫–∞ **{self.purchase_data['item_name']}** –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                        color=discord.Color.red()
                    )
                    dm_embed.add_field(name="üìù –ü—Ä–∏—á–∏–Ω–∞", value=self.reason.value, inline=False)
                    dm_embed.add_field(name="üí∞ –í–æ–∑–≤—Ä–∞—Ç", value=f"–í–∞–º –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {self.purchase_data['points_cost']} –æ—á–∫–æ–≤", inline=False)
                    await buyer.send(embed=dm_embed)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–°
                
        else:
            await interaction.followup.send(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                ephemeral=True
            )

class ShopSelectMenu(ui.Select):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"""
    
    def __init__(self):
        options = []
        
        for item in SHOP_ITEMS.values():
            options.append(discord.SelectOption(
                label=f"{item.name} - {item.cost} –æ—á–∫–æ–≤",
                value=item.id,
                description=item.description,
                emoji=item.emoji
            ))
        
        super().__init__(
            placeholder="üõí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏...",
            min_values=1,
            max_values=1,
            options=options
        )
    
    async def callback(self, interaction: discord.Interaction):
        item_id = self.values[0]
        item = ShopManager.get_item_by_id(item_id)
        
        if not item:
            await interaction.response.send_message("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        points, _ = await EventDatabase.get_user_points(interaction.guild.id, interaction.user.id)
        
        if points < item.cost:
            await interaction.response.send_message(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤!\n"
                f"üíé –ù—É–∂–Ω–æ: **{item.cost}** –æ—á–∫–æ–≤\n"
                f"üí∞ –£ –≤–∞—Å: **{EventManager.format_points_display(points)}** –æ—á–∫–æ–≤\n"
                f"üìà –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: **{item.cost - points}** –æ—á–∫–æ–≤",
                ephemeral=True
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        embed = discord.Embed(
            title="üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
            description=f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å: **{item.name}**",
            color=discord.Color.orange()
        )
        
        embed.add_field(name="üíé –°—Ç–æ–∏–º–æ—Å—Ç—å", value=f"{item.cost} –æ—á–∫–æ–≤", inline=True)
        embed.add_field(name="üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å", value=f"{EventManager.format_points_display(points)} –æ—á–∫–æ–≤", inline=True)
        embed.add_field(name="üí≥ –û—Å—Ç–∞—Ç–æ–∫", value=f"{EventManager.format_points_display(points - item.cost)} –æ—á–∫–æ–≤", inline=True)
        embed.add_field(name="üìù –û–ø–∏—Å–∞–Ω–∏–µ", value=item.description, inline=False)
        
        embed.set_footer(text="‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –æ—á–∫–∏ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã! –¢–æ–≤–∞—Ä –≤—ã–¥–∞–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        
        view = ShopPurchaseConfirmView(item)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class ShopPurchaseConfirmView(ui.View):
    """View –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    
    def __init__(self, item):
        super().__init__(timeout=300)
        self.item = item
    
    @ui.button(label="‚úÖ –ö—É–ø–∏—Ç—å", style=discord.ButtonStyle.success)
    async def confirm_purchase(self, interaction: discord.Interaction, button: ui.Button):
        # –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
        success = await EventDatabase.create_shop_purchase(
            guild_id=interaction.guild.id,
            user_id=interaction.user.id,
            item_id=self.item.id,
            item_name=self.item.name,
            points_cost=self.item.cost
        )
        
        if success:
            embed = discord.Embed(
                title="‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
                description=f"–í—ã –∫—É–ø–∏–ª–∏: **{self.item.name}**",
                color=discord.Color.green()
            )
            
            embed.add_field(
                name="üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                value=(
                    "1. –í–∞—à–∏ –æ—á–∫–∏ —Å–ø–∏—Å–∞–Ω—ã\n"
                    "2. –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º\n"
                    "3. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–≥—Ä–µ\n"
                    "4. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ"
                ),
                inline=False
            )
            
            embed.set_footer(text="üí° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /balance")
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ
            await self._notify_moderators_about_purchase(interaction)
            
        else:
            await interaction.response.send_message(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.",
                ephemeral=True
            )
    
    async def _notify_moderators_about_purchase(self, interaction: discord.Interaction):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –ø–æ–∫—É–ø–∫–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏
            guild_config = await EventDatabase.get_guild_config(interaction.guild.id)
            points_moderator_roles = guild_config.get('points_moderator_roles', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏–Ω–≥–∏ —Ä–æ–ª–µ–π
            ping_text = ""
            if points_moderator_roles:
                role_ids = [rid.strip() for rid in points_moderator_roles.split(',') if rid.strip()]
                for role_id in role_ids:
                    try:
                        role = interaction.guild.get_role(int(role_id))
                        if role:
                            ping_text += f"{role.mention} "
                    except ValueError:
                        continue
            
            if ping_text:
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∫—É–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                purchase_id = await EventDatabase.get_latest_purchase_id(
                    interaction.guild.id, 
                    interaction.user.id
                )
                
                # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                embed = discord.Embed(
                    title="üõí –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!",
                    color=discord.Color.blue(),
                    timestamp=interaction.created_at
                )
                
                embed.add_field(name="üÜî ID –ø–æ–∫—É–ø–∫–∏", value=f"#{purchase_id}", inline=True)
                embed.add_field(name="üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
                embed.add_field(name="üéÅ –¢–æ–≤–∞—Ä", value=self.item.name, inline=True)
                embed.add_field(name="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", value=f"{self.item.cost} –æ—á–∫–æ–≤", inline=True)
                embed.add_field(name="üìù –û–ø–∏—Å–∞–Ω–∏–µ", value=self.item.description, inline=False)
                
                embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /shop_process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏
                view = ShopModerationView(purchase_id, interaction.user.id, self.item)
                
                content = f"{ping_text}\nüîî **–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!**"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –≤ –∫–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π
                shop_channel_id = guild_config.get('shop_channel')
                target_channel_id = shop_channel_id if shop_channel_id else guild_config.get('events_channel')
                
                if target_channel_id:
                    try:
                        channel = interaction.guild.get_channel(int(target_channel_id))
                        if channel:
                            await channel.send(content=content, embed=embed, view=view)
                        else:
                            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª
                            await interaction.followup.send(content=content, embed=embed, view=view)
                    except:
                        await interaction.followup.send(content=content, embed=embed, view=view)
                else:
                    await interaction.followup.send(content=content, embed=embed, view=view)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–∫—É–ø–∫–µ: {e}")
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def cancel_purchase(self, interaction: discord.Interaction, button: ui.Button):
        await interaction.response.send_message("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", ephemeral=True)

class ShopButton(ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    
    def __init__(self):
        super().__init__(
            label="üõí –ú–∞–≥–∞–∑–∏–Ω",
            style=discord.ButtonStyle.secondary,
            custom_id="shop_button"
        )
    
    async def callback(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        points, events_count = await EventDatabase.get_user_points(
            interaction.guild.id, 
            interaction.user.id
        )
        
        embed = ShopManager.get_shop_embed()
        embed.add_field(
            name="üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å",
            value=f"**{EventManager.format_points_display(points)}** –æ—á–∫–æ–≤\nüé™ –°–æ–±—ã—Ç–∏–π: {events_count}",
            inline=False
        )
        
        view = ui.View()
        view.add_item(ShopSelectMenu())
        
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

class BalanceButton(ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞"""
    
    def __init__(self):
        super().__init__(
            label="üí∞ –ë–∞–ª–∞–Ω—Å",
            style=discord.ButtonStyle.secondary,
            custom_id="balance_button"
        )
    
    async def callback(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        points, events_count = await EventDatabase.get_user_points(
            interaction.guild.id, 
            interaction.user.id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏–π
        event_history = await EventDatabase.get_user_event_history(
            interaction.guild.id,
            interaction.user.id,
            limit=3
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
        purchase_history = await EventDatabase.get_user_purchase_history(
            interaction.guild.id,
            interaction.user.id,
            limit=3
        )
        
        embed = discord.Embed(
            title="üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å",
            color=discord.Color.gold()
        )
        
        embed.add_field(
            name="üíé –û—á–∫–∏",
            value=f"**{EventManager.format_points_display(points)}**",
            inline=True
        )
        
        embed.add_field(
            name="üé™ –°–æ–±—ã—Ç–∏—è",
            value=f"**{events_count}**",
            inline=True
        )
        
        if points > 0:
            embed.add_field(
                name="üìä –°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Å–æ–±—ã—Ç–∏–µ",
                value=f"**{EventManager.format_points_display(points / events_count)}**",
                inline=True
            )
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π
        if event_history:
            history_text = ""
            for event in event_history:
                status_emoji = {"approved": "‚úÖ", "rejected": "‚ùå", "pending": "‚è≥"}.get(event['status'], "‚ùì")
                points_text = f"+{EventManager.format_points_display(event['points_awarded'])}" if event['points_awarded'] else "0"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
                try:
                    event_type = EventType(event['event_type'])
                    action = EventAction(event['action'])
                    from events import EVENT_CONFIG
                    event_info = EVENT_CONFIG[event_type]
                    event_name = f"{event_info.emoji} {event_info.name_ru}"
                except:
                    event_name = f"{event['event_type']} ({event['action']})"
                
                history_text += f"{status_emoji} {event_name} - {points_text}\n"
            
            embed.add_field(
                name="üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
                value=history_text[:300] + ("..." if len(history_text) > 300 else ""),
                inline=False
            )
        
        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫
        if purchase_history:
            purchase_text = ""
            for purchase in purchase_history:
                status_emoji = {"completed": "‚úÖ", "rejected": "‚ùå", "pending": "‚è≥"}.get(purchase['status'], "‚ùì")
                purchase_text += f"{status_emoji} {purchase['item_name']} - {purchase['points_cost']} –æ—á–∫–æ–≤\n"
            
            embed.add_field(
                name="üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
                value=purchase_text[:300] + ("..." if len(purchase_text) > 300 else ""),
                inline=False
            )
        
        embed.set_thumbnail(url=interaction.user.display_avatar.url)
        embed.set_footer(text="üí° –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)

# ‚îÄ‚îÄ‚îÄ –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class UnifiedEventView(ui.View):
    """–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤—Å–µ–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(EventSubmitButton())
        self.add_item(BalanceButton())
        self.add_item(ShopButton())
        self.add_item(PointsRequestButton())

class PointsRequestButton(ui.Button):
    """–ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤"""
    
    def __init__(self):
        super().__init__(
            label="üí∞ –ó–∞—á–∏—Å–ª–∏—Ç—å –æ—á–∫–∏",
            style=discord.ButtonStyle.secondary,
            custom_id="points_request_btn"
        )
    
    async def callback(self, interaction: discord.Interaction):
        modal = PointsRequestModal()
        await interaction.response.send_modal(modal)

class PointsRequestModal(ui.Modal):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤"""
    
    def __init__(self):
        super().__init__(title="üìù –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤")
    
    recipient = ui.TextInput(
        label="–ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—á–∫–æ–≤",
        placeholder="@username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        required=True,
        max_length=100
    )
    
    points = ui.TextInput(
        label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è",
        required=True,
        max_length=10
    )
    
    reason = ui.TextInput(
        label="–ü—Ä–∏—á–∏–Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è",
        placeholder="–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤",
        style=discord.TextStyle.paragraph,
        required=True,
        max_length=1000
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            points_amount = float(self.points.value)
            if points_amount <= 0:
                await interaction.response.send_message("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—á–∫–æ–≤!", ephemeral=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏ –¥–ª—è –ø–∏–Ω–≥–∞ —Ä–æ–ª–µ–π
        guild_config = await EventDatabase.get_guild_config(interaction.guild.id)
        points_moderator_roles = guild_config.get('points_moderator_roles', '')
        
        # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –∑–∞—è–≤–∫–∏
        embed = discord.Embed(
            title="üí∞ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤",
            color=discord.Color.gold(),
            timestamp=interaction.created_at
        )
        
        embed.add_field(name="–ü–æ–ª—É—á–∞—Ç–µ–ª—å", value=self.recipient.value, inline=True)
        embed.add_field(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤", value=f"+{points_amount}", inline=True)
        embed.add_field(name="–ó–∞—è–≤–∏—Ç–µ–ª—å", value=interaction.user.mention, inline=True)
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=self.reason.value, inline=False)
        
        # –°–æ–∑–¥–∞–µ–º view —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
        view = PointsRequestView(
            recipient_input=self.recipient.value,
            points_amount=points_amount,
            reason=self.reason.value,
            requester_id=interaction.user.id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∏–Ω–≥–∏ —Ä–æ–ª–µ–π
        ping_text = ""
        if points_moderator_roles:
            role_ids = [rid.strip() for rid in points_moderator_roles.split(',') if rid.strip()]
            for role_id in role_ids:
                try:
                    role = interaction.guild.get_role(int(role_id))
                    if role:
                        ping_text += f"{role.mention} "
                except ValueError:
                    continue
        
        content = f"{ping_text}\nüîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤!**" if ping_text else "üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤!**"
        
        await interaction.response.send_message(
            content=content,
            embed=embed,
            view=view
        )

class PointsRequestView(ui.View):
    """View –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤"""
    
    def __init__(self, recipient_input: str, points_amount: float, reason: str, requester_id: int):
        super().__init__(timeout=None)
        self.recipient_input = recipient_input
        self.points_amount = points_amount
        self.reason = reason
        self.requester_id = requester_id
    
    @ui.button(label="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", style=discord.ButtonStyle.success, custom_id="approve_points")
    async def approve_points(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        guild_config = await EventDatabase.get_guild_config(interaction.guild.id)
        points_moderator_roles = guild_config.get('points_moderator_roles', '')
        
        has_permission = False
        if points_moderator_roles:
            role_ids = [rid.strip() for rid in points_moderator_roles.split(',') if rid.strip()]
            user_role_ids = [str(role.id) for role in interaction.user.roles]
            has_permission = any(role_id in user_role_ids for role_id in role_ids)
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ–ª–∏
        admin_role = guild_config.get('admin_role')
        moderator_role = guild_config.get('moderator_role')
        if admin_role and str(interaction.user.get_role(int(admin_role))) in [str(role) for role in interaction.user.roles]:
            has_permission = True
        if moderator_role and str(interaction.user.get_role(int(moderator_role))) in [str(role) for role in interaction.user.roles]:
            has_permission = True
        
        if not has_permission:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—á–∫–∏!", ephemeral=True)
            return
        
        # –ü–∞—Ä—Å–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient_user = None
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é –∏–ª–∏ ID
        user_id_match = re.search(r'<@!?(\d+)>|(\d+)', self.recipient_input)
        if user_id_match:
            user_id = int(user_id_match.group(1) or user_id_match.group(2))
            recipient_user = interaction.guild.get_member(user_id)
        
        if not recipient_user:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", ephemeral=True)
            return
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        success = await EventDatabase.add_user_points(
            guild_id=interaction.guild.id,
            user_id=recipient_user.id,
            points=self.points_amount
        )
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º embed
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.green()
            embed.add_field(name="‚úÖ –°—Ç–∞—Ç—É—Å", value=f"–û–¥–æ–±—Ä–µ–Ω–æ {interaction.user.mention}", inline=False)
            
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            await interaction.response.edit_message(embed=embed, view=None)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            try:
                await recipient_user.send(
                    f"üéâ –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ **{self.points_amount}** –æ—á–∫–æ–≤!\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {self.reason}\n"
                    f"–û–¥–æ–±—Ä–µ–Ω–æ: {interaction.user.mention}"
                )
            except discord.Forbidden:
                pass
        else:
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤!", ephemeral=True)
    
    @ui.button(label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, custom_id="reject_points")
    async def reject_points(self, interaction: discord.Interaction, button: ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ approve_points)
        guild_config = await EventDatabase.get_guild_config(interaction.guild.id)
        points_moderator_roles = guild_config.get('points_moderator_roles', '')
        
        has_permission = False
        if points_moderator_roles:
            role_ids = [rid.strip() for rid in points_moderator_roles.split(',') if rid.strip()]
            user_role_ids = [str(role.id) for role in interaction.user.roles]
            has_permission = any(role_id in user_role_ids for role_id in role_ids)
        
        admin_role = guild_config.get('admin_role')
        moderator_role = guild_config.get('moderator_role')
        if admin_role and str(interaction.user.get_role(int(admin_role))) in [str(role) for role in interaction.user.roles]:
            has_permission = True
        if moderator_role and str(interaction.user.get_role(int(moderator_role))) in [str(role) for role in interaction.user.roles]:
            has_permission = True
        
        if not has_permission:
            await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—á–∫–∏!", ephemeral=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º embed
        embed = interaction.message.embeds[0]
        embed.color = discord.Color.red()
        embed.add_field(name="‚ùå –°—Ç–∞—Ç—É—Å", value=f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ {interaction.user.mention}", inline=False)
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        await interaction.response.edit_message(embed=embed, view=None)

class ResetPointsConfirmationView(ui.View):
    """View –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        super().__init__(timeout=60)  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    
    @ui.button(label="‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å –æ—á–∫–∏ –≤—Å–µ–º", style=discord.ButtonStyle.danger)
    async def confirm_reset(self, interaction: discord.Interaction, button: ui.Button):
        # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
                ephemeral=True
            )
            return
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –æ—á–∫–æ–≤
            success = await EventDatabase.reset_all_points(interaction.guild.id)
            
            if success:
                embed = discord.Embed(
                    title="‚úÖ –û—á–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã",
                    description="–û—á–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω—ã.",
                    color=discord.Color.green()
                )
                embed.add_field(
                    name="üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
                    value=interaction.user.mention, 
                    inline=True
                )
                embed.set_footer(text=f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ {interaction.user.display_name}")
                
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
                for item in self.children:
                    item.disabled = True
                
                await interaction.response.edit_message(embed=embed, view=self)
            else:
                await interaction.response.send_message(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.",
                    ephemeral=True
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –æ—á–∫–æ–≤: {e}")
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤: {e}",
                ephemeral=True
            )
    
    @ui.button(label="‚ùå –û—Ç–º–µ–Ω–∞", style=discord.ButtonStyle.secondary)
    async def cancel_reset(self, interaction: discord.Interaction, button: ui.Button):
        embed = discord.Embed(
            title="‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω",
            description="–û—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            color=discord.Color.orange()
        )
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for item in self.children:
            item.disabled = True
        
        await interaction.response.edit_message(embed=embed, view=self)
